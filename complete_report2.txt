def generate_complete_report(patient, doctor, notes, observations, summary=None, language=None):
    """
    Generate a complete PDF report with all patient data, vital signs, and observations
    
    Args:
        patient: Patient object
        doctor: Doctor object
        notes: List of Note objects
        observations: List of VitalObservation objects
        summary: Optional summary text provided by the doctor (not saved to database)
        language: Optional language code override (it/en)
        
    Returns:
        BytesIO: PDF file as a binary stream
    """
    buffer = BytesIO()
    
    # Get translations
    t = get_report_translations(language)
    
    # Create the PDF document
    doc = SimpleDocTemplate(
        buffer,
        pagesize=letter,
        rightMargin=72,
        leftMargin=72,
        topMargin=72,
        bottomMargin=72
    )
    
    # Get styles
    styles = getSampleStyleSheet()
    styles.add(ParagraphStyle(
        name='Heading1Center',
        parent=styles['Heading1'],
        alignment=1  # 0=left, 1=center, 2=right
    ))
    styles.add(ParagraphStyle(
        name='Normal-Center',
        parent=styles['Normal'],
        alignment=1
    ))
    styles.add(ParagraphStyle(
        name='Normal-Bold',
        parent=styles['Normal'],
        fontName='Helvetica-Bold'
    ))
    
    # Build content
    content = []
    
    # Report Header
    content.append(Paragraph(t['complete_report'], styles['Heading1Center']))
    content.append(Spacer(1, 12))
    
    # Date of report
    content.append(Paragraph(f"{t['generated_on']}: {datetime.now().strftime('%Y-%m-%d %H:%M')}", styles['Normal-Center']))
    content.append(Spacer(1, 24))
    
    # Patient Information
    content.append(Paragraph(t['patient_info'], styles['Heading2']))
    content.append(Spacer(1, 6))
    
    patient_data = [
        [f"{t['name']}:", f"{patient.first_name} {patient.last_name}"],
        [f"{t['date_of_birth']}:", patient.date_of_birth.strftime('%Y-%m-%d')],
        [f"{t['gender']}:", patient.gender or t['not_specified']],
        [f"{t['contact']}:", patient.contact_number or t['not_provided']]
    ]
    
    patient_table = Table(patient_data, colWidths=[1.5*inch, 4*inch])
    patient_table.setStyle(TableStyle([
        ('BACKGROUND', (0, 0), (0, -1), colors.lightgrey),
        ('TEXTCOLOR', (0, 0), (-1, -1), colors.black),
        ('ALIGN', (0, 0), (-1, -1), 'LEFT'),
        ('FONTNAME', (0, 0), (-1, -1), 'Helvetica'),
        ('FONTSIZE', (0, 0), (-1, -1), 10),
        ('BOTTOMPADDING', (0, 0), (-1, -1), 5),
        ('TOPPADDING', (0, 0), (-1, -1), 5),
        ('GRID', (0, 0), (-1, -1), 1, colors.black)
    ]))
    
    content.append(patient_table)
    content.append(Spacer(1, 12))
    
    # Doctor Information
    content.append(Paragraph(t['attending_physician'], styles['Heading2']))
    content.append(Spacer(1, 6))
    
    doctor_data = [
        [f"{t['name']}:", f"Dr. {doctor.first_name} {doctor.last_name}"],
        [f"{t['specialty']}:", doctor.specialty or t['general_practice']],
        [f"{t['email']}:", doctor.email]
    ]
    
    doctor_table = Table(doctor_data, colWidths=[1.5*inch, 4*inch])
    doctor_table.setStyle(TableStyle([
        ('BACKGROUND', (0, 0), (0, -1), colors.lightgrey),
        ('TEXTCOLOR', (0, 0), (-1, -1), colors.black),
        ('ALIGN', (0, 0), (-1, -1), 'LEFT'),
        ('FONTNAME', (0, 0), (-1, -1), 'Helvetica'),
        ('FONTSIZE', (0, 0), (-1, -1), 10),
        ('BOTTOMPADDING', (0, 0), (-1, -1), 5),
        ('TOPPADDING', (0, 0), (-1, -1), 5),
        ('GRID', (0, 0), (-1, -1), 1, colors.black)
    ]))
    
    content.append(doctor_table)
    content.append(Spacer(1, 24))
    
    # Summary section (if provided)
    if summary:
        content.append(Paragraph(t['summary'], styles['Heading2']))
        content.append(Spacer(1, 6))
        content.append(Paragraph(summary, styles['Normal']))
        content.append(Spacer(1, 24))
    
    # Notes section
    content.append(Paragraph(t['clinical_notes'], styles['Heading2']))
    content.append(Spacer(1, 6))
    
    if notes:
        for i, note in enumerate(notes):
            date_str = note.created_at.strftime('%Y-%m-%d %H:%M')
            doctor_name = f"Dr. {note.doctor.first_name} {note.doctor.last_name}"
            content.append(Paragraph(f"<b>{date_str} - {doctor_name}</b>", styles['Normal']))
            content.append(Paragraph(note.content, styles['Normal']))
            content.append(Spacer(1, 6))
            
            # Add a divider between notes except for the last one
            if i < len(notes) - 1:
                content.append(Spacer(1, 6))
                content.append(Paragraph("_" * 80, styles['Normal']))
                content.append(Spacer(1, 6))
    else:
        content.append(Paragraph(t['no_notes'], styles['Normal']))
    
    content.append(Spacer(1, 24))
    
    # Vital Signs section - generate charts for all vital types
    content.append(Paragraph(t['vital_signs'], styles['Heading2']))
    content.append(Spacer(1, 6))
    
    # Get all vital types that patient has data for
    from health_platforms import get_vitals_data
    
    # Each vital type will have charts for different time periods
    vital_types = [vt for vt in VitalSignType]
    periods = [(1, t['one_day']), (7, t['seven_days']), (30, t['one_month']), (90, t['three_months']), (365, t['one_year'])]
    
    # Add charts for each vital type and period
    for vital_type in vital_types:
        content.append(Paragraph(f"{vital_type.value.replace('_', ' ').title()}", styles['Heading3']))
        content.append(Spacer(1, 6))
        
        has_data = False
        
        for days, period_name in periods:
            # Calculate date range
            end_date = datetime.now()
            start_date = end_date - timedelta(days=days)
            
            try:
                # Try to get data from health platform
                vitals_data = get_vitals_data(
                    patient,
                    vital_type.value,
                    start_date.strftime('%Y-%m-%d'),
                    end_date.strftime('%Y-%m-%d')
                )
                
                if vitals_data and len(vitals_data) > 0:
                    has_data = True
                    
                    # Create chart
                    chart = create_vital_chart(vitals_data, period_name, vital_type.value)
                    content.append(chart)
                    content.append(Spacer(1, 12))
                    
            except Exception as e:
                logger.error(f"Error getting data for {vital_type.value}: {str(e)}")
                # Just skip this chart if there's an error
                pass
        
        if not has_data:
            content.append(Paragraph(t['no_vital_data'], styles['Normal']))
            
        content.append(Spacer(1, 18))
    
    # Observations section
    content.append(PageBreak())
    content.append(Paragraph(t['observations'], styles['Heading2']))
    content.append(Spacer(1, 6))
    
    if observations:
        # Group observations by vital type
        obs_by_type = {}
        for obs in observations:
            vital_type = obs.vital_type.value
            if vital_type not in obs_by_type:
                obs_by_type[vital_type] = []
            obs_by_type[vital_type].append(obs)
        
        # Add observations for each vital type
        for vital_type, obs_list in obs_by_type.items():
            content.append(Paragraph(f"{vital_type.replace('_', ' ').title()}", styles['Heading3']))
            content.append(Spacer(1, 6))
            
            for i, obs in enumerate(obs_list):
                # Format the date range
                date_range = f"{obs.start_date.strftime('%Y-%m-%d')} - {obs.end_date.strftime('%Y-%m-%d')}"
                doctor_name = f"Dr. {obs.doctor.first_name} {obs.doctor.last_name}"
                
                content.append(Paragraph(f"<b>{date_range} - {doctor_name}</b>", styles['Normal']))
                content.append(Paragraph(obs.content, styles['Normal']))
                content.append(Spacer(1, 6))
                
                # Add a divider between observations except for the last one
                if i < len(obs_list) - 1:
                    content.append(Spacer(1, 3))
                    content.append(Paragraph("_" * 40, styles['Normal']))
                    content.append(Spacer(1, 3))
            
            content.append(Spacer(1, 12))
    else:
        content.append(Paragraph(t['no_observations'], styles['Normal']))
    
    # Build PDF
    doc.build(content)
    buffer.seek(0)
    return buffer

def generate_specific_report(patient, doctor, selected_notes, selected_vital_types, selected_charts, selected_observations, summary=None, language=None):
    """
    Generate a specific PDF report with only selected data
    
    Args:
        patient: Patient object
        doctor: Doctor object
        selected_notes: List of selected Note objects
        selected_vital_types: List of selected vital types
        selected_charts: Dict mapping vital type to list of selected time periods
        selected_observations: List of selected VitalObservation objects
        summary: Optional summary text provided by the doctor (not saved to database)
        language: Optional language code override (it/en)
        
    Returns:
        BytesIO: PDF file as a binary stream
    """
    buffer = BytesIO()
    
    # Get translations
    t = get_report_translations(language)
    
    # Create the PDF document
    doc = SimpleDocTemplate(
        buffer,
        pagesize=letter,
        rightMargin=72,
        leftMargin=72,
        topMargin=72,
        bottomMargin=72
    )
    
    # Get styles
    styles = getSampleStyleSheet()
    styles.add(ParagraphStyle(
        name='Heading1Center',
        parent=styles['Heading1'],
        alignment=1  # 0=left, 1=center, 2=right
    ))
    styles.add(ParagraphStyle(
        name='Normal-Center',
        parent=styles['Normal'],
        alignment=1
    ))
    styles.add(ParagraphStyle(
        name='Normal-Bold',
        parent=styles['Normal'],
        fontName='Helvetica-Bold'
    ))
    
    # Build content
    content = []
    
    # Report Header
    content.append(Paragraph(t['specific_report'], styles['Heading1Center']))
    content.append(Spacer(1, 12))
    
    # Date of report
    content.append(Paragraph(f"{t['generated_on']}: {datetime.now().strftime('%Y-%m-%d %H:%M')}", styles['Normal-Center']))
    content.append(Spacer(1, 24))
    
    # Patient Information
    content.append(Paragraph(t['patient_info'], styles['Heading2']))
    content.append(Spacer(1, 6))
    
    patient_data = [
        [f"{t['name']}:", f"{patient.first_name} {patient.last_name}"],
        [f"{t['date_of_birth']}:", patient.date_of_birth.strftime('%Y-%m-%d')],
        [f"{t['gender']}:", patient.gender or t['not_specified']],
        [f"{t['contact']}:", patient.contact_number or t['not_provided']]
    ]
    
    patient_table = Table(patient_data, colWidths=[1.5*inch, 4*inch])
    patient_table.setStyle(TableStyle([
        ('BACKGROUND', (0, 0), (0, -1), colors.lightgrey),
        ('TEXTCOLOR', (0, 0), (-1, -1), colors.black),
        ('ALIGN', (0, 0), (-1, -1), 'LEFT'),
        ('FONTNAME', (0, 0), (-1, -1), 'Helvetica'),
        ('FONTSIZE', (0, 0), (-1, -1), 10),
        ('BOTTOMPADDING', (0, 0), (-1, -1), 5),
        ('TOPPADDING', (0, 0), (-1, -1), 5),
        ('GRID', (0, 0), (-1, -1), 1, colors.black)
    ]))
    
    content.append(patient_table)
    content.append(Spacer(1, 12))
    
    # Doctor Information
    content.append(Paragraph(t['attending_physician'], styles['Heading2']))
    content.append(Spacer(1, 6))
    
    doctor_data = [
        [f"{t['name']}:", f"Dr. {doctor.first_name} {doctor.last_name}"],
        [f"{t['specialty']}:", doctor.specialty or t['general_practice']],
        [f"{t['email']}:", doctor.email]
    ]
    
    doctor_table = Table(doctor_data, colWidths=[1.5*inch, 4*inch])
    doctor_table.setStyle(TableStyle([
        ('BACKGROUND', (0, 0), (0, -1), colors.lightgrey),
        ('TEXTCOLOR', (0, 0), (-1, -1), colors.black),
        ('ALIGN', (0, 0), (-1, -1), 'LEFT'),
        ('FONTNAME', (0, 0), (-1, -1), 'Helvetica'),
        ('FONTSIZE', (0, 0), (-1, -1), 10),
        ('BOTTOMPADDING', (0, 0), (-1, -1), 5),
        ('TOPPADDING', (0, 0), (-1, -1), 5),
        ('GRID', (0, 0), (-1, -1), 1, colors.black)
    ]))
    
    content.append(doctor_table)
    content.append(Spacer(1, 24))
    
    # Summary section (if provided)
    if summary:
        content.append(Paragraph(t['summary'], styles['Heading2']))
        content.append(Spacer(1, 6))
        content.append(Paragraph(summary, styles['Normal']))
        content.append(Spacer(1, 24))
    
    # Selected notes section
    if selected_notes:
        content.append(Paragraph(t['clinical_notes'], styles['Heading2']))
        content.append(Spacer(1, 6))
        
        for i, note in enumerate(selected_notes):
            date_str = note.created_at.strftime('%Y-%m-%d %H:%M')
            doctor_name = f"Dr. {note.doctor.first_name} {note.doctor.last_name}"
            content.append(Paragraph(f"<b>{date_str} - {doctor_name}</b>", styles['Normal']))
            content.append(Paragraph(note.content, styles['Normal']))
            content.append(Spacer(1, 6))
            
            # Add a divider between notes except for the last one
            if i < len(selected_notes) - 1:
                content.append(Spacer(1, 6))
                content.append(Paragraph("_" * 80, styles['Normal']))
                content.append(Spacer(1, 6))
        
        content.append(Spacer(1, 24))
    
    # Selected vital signs section
    if selected_vital_types and selected_charts:
        content.append(Paragraph(t['vital_signs'], styles['Heading2']))
        content.append(Spacer(1, 6))
        
        from health_platforms import get_vitals_data
        
        # Map period strings to days and display names
        period_display = {
            '1d': (1, t['one_day']),
            '7d': (7, t['seven_days']),
            '1m': (30, t['one_month']),
            '3m': (90, t['three_months']),
            '1y': (365, t['one_year'])
        }
        
        for vital_type in selected_vital_types:
            vital_type_value = vital_type.value
            content.append(Paragraph(f"{vital_type_value.replace('_', ' ').title()}", styles['Heading3']))
            content.append(Spacer(1, 6))
            
            # Check if this vital type has selected charts
            if vital_type_value in selected_charts and selected_charts[vital_type_value]:
                periods = selected_charts[vital_type_value]
                
                for period_days in periods:
                    # Get period display name
                    if period_days == 1:
                        period_name = t['one_day']
                    elif period_days == 7:
                        period_name = t['seven_days']
                    elif period_days == 30:
                        period_name = t['one_month']
                    elif period_days == 90:
                        period_name = t['three_months']
                    elif period_days == 365:
                        period_name = t['one_year']
                    else:
                        period_name = f"{period_days} days"
                    
                    # Calculate date range
                    end_date = datetime.now()
                    start_date = end_date - timedelta(days=period_days)
                    
                    try:
                        # Try to get data from health platform
                        vitals_data = get_vitals_data(
                            patient,
                            vital_type_value,
                            start_date.strftime('%Y-%m-%d'),
                            end_date.strftime('%Y-%m-%d')
                        )
                        
                        if vitals_data and len(vitals_data) > 0:
                            # Create chart
                            chart = create_vital_chart(vitals_data, period_name, vital_type_value)
                            content.append(chart)
                            content.append(Spacer(1, 12))
                            
                        else:
                            content.append(Paragraph(f"{period_name}: {t['no_vital_data']}", styles['Normal']))
                            content.append(Spacer(1, 6))
                            
                    except Exception as e:
                        logger.error(f"Error getting data for {vital_type_value}: {str(e)}")
                        content.append(Paragraph(f"{period_name}: {t['no_vital_data']}", styles['Normal']))
                        content.append(Spacer(1, 6))
            else:
                content.append(Paragraph(t['no_vital_data'], styles['Normal']))
                
            content.append(Spacer(1, 18))
    
    # Selected observations section
    if selected_observations:
        content.append(PageBreak())
        content.append(Paragraph(t['observations'], styles['Heading2']))
        content.append(Spacer(1, 6))
        
        # Group observations by vital type
        obs_by_type = {}
        for obs in selected_observations:
            vital_type = obs.vital_type.value
            if vital_type not in obs_by_type:
                obs_by_type[vital_type] = []
            obs_by_type[vital_type].append(obs)
        
        # Add observations for each vital type
        for vital_type, obs_list in obs_by_type.items():
            content.append(Paragraph(f"{vital_type.replace('_', ' ').title()}", styles['Heading3']))
            content.append(Spacer(1, 6))
            
            for i, obs in enumerate(obs_list):
                # Format the date range
                date_range = f"{obs.start_date.strftime('%Y-%m-%d')} - {obs.end_date.strftime('%Y-%m-%d')}"
                doctor_name = f"Dr. {obs.doctor.first_name} {obs.doctor.last_name}"
                
                content.append(Paragraph(f"<b>{date_range} - {doctor_name}</b>", styles['Normal']))
                content.append(Paragraph(obs.content, styles['Normal']))
                content.append(Spacer(1, 6))
                
                # Add a divider between observations except for the last one
                if i < len(obs_list) - 1:
                    content.append(Spacer(1, 3))
                    content.append(Paragraph("_" * 40, styles['Normal']))
                    content.append(Spacer(1, 3))
            
            content.append(Spacer(1, 12))
    
    # Build PDF
    doc.build(content)
    buffer.seek(0)
    return buffer

def generate_vital_trends_report(patient, vital_type, vitals, period_desc, language=None):
    """
    Generate a PDF report showing trends for a specific vital sign
    
    Args:
        patient: Patient object
        vital_type: Type of vital sign (string)
        vitals: List of data points from health platform
        period_desc: Description of the time period
        language: Optional language code override (it/en)
        
    Returns:
        BytesIO: PDF file as a binary stream
    """
    buffer = BytesIO()
    
    # Get translations
    t = get_report_translations(language)
    
    # Create the PDF document
    doc = SimpleDocTemplate(
        buffer,
        pagesize=letter,
        rightMargin=72,
        leftMargin=72,
        topMargin=72,
        bottomMargin=72
    )
    
    # Get styles
    styles = getSampleStyleSheet()
    styles.add(ParagraphStyle(
        name='Heading1Center',
        parent=styles['Heading1'],
        alignment=1
    ))
    
    # Mappatura dei nomi di parametri vitali
    vital_names = {
        'heart_rate': 'Heart Rate',
        'steps': 'Steps',
        'weight': 'Weight',
        'sleep': 'Sleep',
        'activity': 'Activity',
        'distance': 'Distance'
    }
    
    # Mappatura delle unità di misura
    vital_units = {
        'heart_rate': 'bpm',
        'steps': 'steps',
        'weight': 'kg',
        'sleep': 'minutes',
        'activity': 'minutes',
        'distance': 'km'
    }
    
    # Get the vital name and unit
    vital_name = vital_names.get(vital_type, vital_type.replace('_', ' ').title())
    unit = vital_units.get(vital_type, '')
    
    # Build content
    content = []
    
    # Report Header
    content.append(Paragraph(f"{vital_name} {t['trend_analysis']}", styles['Heading1Center']))
    content.append(Spacer(1, 12))
    
    # Patient info
    content.append(Paragraph(f"{t['patient']}: {patient.first_name} {patient.last_name}", styles['Heading3']))
    content.append(Paragraph(f"{t['period']}: {period_desc}", styles['Normal']))
    content.append(Spacer(1, 24))
    
