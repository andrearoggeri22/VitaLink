"""
Email Utility Module.

This module provides functionality for sending emails through the Mailjet service.
It includes functions to send emails with attachments, such as patient reports.
"""
import os
import base64
import logging
from mailjet_rest import Client
from flask_babel import gettext as _
from .models import Doctor, Patient

# Logger configuration
logger = logging.getLogger(__name__)

# Mailjet API configuration
MJ_APIKEY = os.environ["MJ_APIKEY"]
MJ_APIKEY_SECRET = os.environ["MJ_APIKEY_SECRET"]

def send_report_email(doctor, patient, pdf_buffer, filename, language='it'):
    """
    Sends a PDF report to the patient via email using Mailjet.
    
    Args:
        doctor (Doctor): Doctor object representing the physician who generated the report
        patient (Patient): Patient object of the recipient
        pdf_buffer (BytesIO): buffer containing the PDF report
        filename (str): name of the PDF file
        language (str, optional): language code for translations (it/en)
        
    Returns:
        tuple: Tuple containing (success, message)
            - success (bool): True if the email was sent successfully, otherwise False
            - message (str): success or error message
    """
    if not patient.email:
        return False, _("The patient doesn't have an email address")
    try:
        # Create the Mailjet client
        mailjet = Client(auth=(MJ_APIKEY, MJ_APIKEY_SECRET), version='v3.1')
        
        # Convert PDF to base64
        pdf_content = pdf_buffer.getvalue()
        encoded_pdf = base64.b64encode(pdf_content).decode('utf-8')
        
        # Extract timestamp from filename
        date_str = filename.split('_')[-2]  # Extract date from filename
        
        # Prepare email subject
        subject = _("Medical Report from {doctor_name} - {date}").format(
            doctor_name=f"Dr. {doctor.first_name} {doctor.last_name}",
            date=date_str
        )
        
        # Prepare email content
        text_content = _("""
                Dear {patient_name},

                Attached you will find the medical report generated by {doctor_name}.

                This is an automated message, please do not reply to this email.

                Best regards,
                VitaLink Team
                        """).format(
                            patient_name=f"{patient.first_name} {patient.last_name}",
                            doctor_name=f"Dr. {doctor.first_name} {doctor.last_name}"
                        )
        
        html_content = _("""
            <h3>Dear {patient_name},</h3>

            <p>Attached you will find the medical report generated by {doctor_name}.</p>

            <p><strong>Report Information:</strong><br>
            Date: {date}<br>
            Generated by: {doctor_name}<br>
            Specialty: {specialty}</p>

            <p>This is an automated message, please do not reply to this email.</p>

            <p>Best regards,<br>
            VitaLink Team</p>
                    """).format(
            patient_name=f"{patient.first_name} {patient.last_name}",
            doctor_name=f"Dr. {doctor.first_name} {doctor.last_name}",
            specialty=doctor.specialty or _("General Medicine"),
            date=date_str
        )
          # Prepare data to send to Mailjet
        data = {
            'Messages': [
                {
                    "From": {
                        "Email": os.environ["EMAIL_SENDER"],
                        "Name": "VitaLink"
                    },
                    "To": [
                        {
                            "Email": patient.email,
                            "Name": f"{patient.first_name} {patient.last_name}"
                        }
                    ],
                    "Subject": subject,
                    "TextPart": text_content,
                    "HTMLPart": html_content,
                    "Attachments": [
                        {
                            "ContentType": "application/pdf",
                            "Filename": filename,
                            "Base64Content": encoded_pdf
                        }
                    ]
                }
            ]
        }
        
        # Execute the Mailjet request
        result = mailjet.send.create(data=data)
        
        # Verify the result
        if result.status_code == 200:
            response_data = result.json()
            if response_data and 'Messages' in response_data and len(response_data['Messages']) > 0:
                message = response_data['Messages'][0]
                if message.get('Status') == 'success':
                    logger.info(f"Email sent successfully to {patient.email}")
                    return True, _("Report sent successfully to {email}").format(email=patient.email)
        
        # If we get here, there was a problem
        logger.error(f"Email sending error: {result.status_code} - {result.json()}")
        return False, _("Error sending email: {error}").format(error=result.status_code)
        
    except Exception as e:
        logger.exception(f"Exception during email sending: {str(e)}")
        return False, _("An error occurred while sending the email: {error}").format(error=str(e))
