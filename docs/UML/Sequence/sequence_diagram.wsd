@startuml VitaLink - Sequence Diagram

' Stile e configurazione
skinparam sequence {
    ArrowColor #555555
    ActorBorderColor #555555
    LifeLineBorderColor #555555
    LifeLineBackgroundColor #f0f0f0
    
    ParticipantBorderColor #555555
    ParticipantBackgroundColor #f0f0f0
    ParticipantFontSize 12
    
    ActorBackgroundColor #f0f0f0
    ActorFontSize 12
}

title VitaLink - Sequence Diagram: Health Platform Integration

actor "Medico" as Doctor
participant "Frontend\nVitaLink" as Frontend
participant "API\nController" as API
participant "health_platforms.py" as HealthModule
participant "FitbitAPI" as FitbitAPI
participant "Audit" as Audit
participant "Database" as DB
actor "Paziente" as Patient 
participant "Piattaforma Salute\n(Fitbit/Google/Apple)" as HealthPlatform

== Creazione Link di Integrazione ==

Doctor -> Frontend : Richiede creazione link di connessione
activate Frontend
Frontend -> API : POST /api/health/create-link
activate API
API -> HealthModule : generate_platform_link(doctor, patient, platform)
activate HealthModule
HealthModule -> DB : Verifica medico e paziente
activate DB
DB --> HealthModule : Conferma dati
deactivate DB
HealthModule -> DB : Crea HealthPlatformLink con UUID unico
activate DB
DB --> HealthModule : Link creato con UUID
deactivate DB
HealthModule -> HealthModule : get_fitbit_authorization_url(link_uuid)
HealthModule -> Audit : log_link_generation(doctor, patient, platform)
activate Audit
Audit -> DB : Insert audit log
DB --> Audit : Conferma
Audit --> HealthModule : OK
deactivate Audit
HealthModule --> API : Restituisce URL di autorizzazione
deactivate HealthModule
API --> Frontend : Restituisce URL con UUID
deactivate API
Frontend --> Doctor : Mostra link di integrazione
deactivate Frontend

== Autorizzazione del Paziente ==

Doctor -> Patient : Comunica link al paziente
Patient -> HealthPlatform : Accede al link di autorizzazione
activate HealthPlatform
HealthPlatform -> HealthPlatform : Chiede autenticazione (se necessario)
HealthPlatform -> Patient : Mostra richiesta di autorizzazione
Patient -> HealthPlatform : Concede l'autorizzazione
HealthPlatform -> API : Callback OAuth con codice di autorizzazione
deactivate HealthPlatform
activate API
API -> HealthModule : handle_oauth_callback(code, state)
activate HealthModule
HealthModule -> DB : get_link_by_uuid(uuid)
activate DB
DB --> HealthModule : Dettagli link (paziente, medico, ecc)
deactivate DB
HealthModule -> FitbitAPI : exchange_fitbit_code_for_token(authorization_code)
activate FitbitAPI
FitbitAPI --> HealthModule : Access token, refresh token, scadenza
deactivate FitbitAPI
HealthModule -> DB : save_fitbit_tokens(patient, token_response)
activate DB
DB --> HealthModule : Conferma salvataggio
deactivate DB
HealthModule -> DB : Aggiorna HealthPlatformLink a 'used'
activate DB
DB --> HealthModule : Conferma aggiornamento
deactivate DB
HealthModule -> Audit : log_platform_connection(doctor, patient, platform)
activate Audit
Audit -> DB : Insert audit log
DB --> Audit : Conferma
Audit --> HealthModule : OK
deactivate Audit
HealthModule --> API : Conferma connessione riuscita
deactivate HealthModule
API --> HealthPlatform : Redirect a pagina di successo
deactivate API

' Flusso principale
Doctor -> Frontend: Richiede sincronizzazione dati Fitbit\nper un paziente
activate Frontend

Frontend -> API: GET /api/patients/{patient_id}/vitals?type=heart_rate
activate API

API -> HealthModule: get_vitals_data(patient, type, start_date, end_date)
activate HealthModule

' Controllo cache
HealthModule -> HealthModule: Verifica cache per la chiave
alt Dati in cache e validi
    HealthModule --> API: Ritorna dati dalla cache
else Dati non in cache o non validi

    ' Controllo token
    HealthModule -> DB: Query token informazioni del paziente
    activate DB
    DB --> HealthModule: Token e data di scadenza
    deactivate DB
    
    HealthModule -> HealthModule: ensure_fresh_token(patient)
    
    alt Token invalido o scaduto
        HealthModule -> FitbitAPI: refresh_fitbit_token(refresh_token)
        activate FitbitAPI
        FitbitAPI --> HealthModule: Nuovi access token e refresh token
        deactivate FitbitAPI
        
        HealthModule -> DB: save_fitbit_tokens(patient, token_response)
        activate DB
        DB --> HealthModule: Conferma salvataggio
        deactivate DB
    end
    
    ' Controllo rate limit
    HealthModule -> HealthModule: check_rate_limit()
    
    alt Rate limit raggiunto
        HealthModule --> API: Errore di rate limit
        API --> Frontend: 429 Too Many Requests
        Frontend --> Doctor: Mostra errore di rate limit
    else Rate limit OK
    
        ' Chiamata a Fitbit API
        HealthModule -> FitbitAPI: get_fitbit_data(patient, data_type, start_date, end_date)
        activate FitbitAPI
        
        alt Chiamata API riuscita
            FitbitAPI --> HealthModule: Dati sulle frequenze cardiache
            deactivate FitbitAPI
            
            ' Elaborazione dati
            HealthModule -> HealthModule: process_fitbit_data(data, data_type)
            
            ' Aggiornamento cache
            HealthModule -> HealthModule: Memorizza nella cache con TTL
            
            ' Logging
            HealthModule -> Audit: log_data_sync(doctor, patient, platform, type, summary)
            activate Audit
            Audit -> DB: Insert audit log
            DB --> Audit: Conferma
            Audit --> HealthModule: OK
            deactivate Audit
            
            ' Risposta
            HealthModule --> API: Dati elaborati
            
        else Errore API
            FitbitAPI --> HealthModule: Errore (401, 403, 429, 500)
            deactivate FitbitAPI
            
            HealthModule -> Audit: log_error(doctor, patient, platform, type, error)
            activate Audit
            Audit -> DB: Insert error log
            DB --> Audit: Conferma
            Audit --> HealthModule: OK
            deactivate Audit
            
            HealthModule --> API: Errore con dettagli
        end
    
    end

end

API --> Frontend: Risposta JSON con dati o errore
deactivate API

Frontend -> Frontend: Renderizza grafici\ncon i dati ricevuti
Frontend --> Doctor: Mostra grafici dei parametri vitali
deactivate Frontend

' Interazione con i dati
Doctor -> Frontend: Aggiunge osservazione sui dati
activate Frontend

Frontend -> API: POST /api/observations
activate API

API -> DB: Salva nuova osservazione
activate DB
DB --> API: Conferma salvataggio
deactivate DB

API -> Audit: log_observation_creation(doctor, observation)
activate Audit
Audit -> DB: Insert audit log
DB --> Audit: Conferma
Audit --> API: OK
deactivate Audit

API --> Frontend: Conferma creazione osservazione
deactivate API

Frontend --> Doctor: Mostra conferma di salvataggio
deactivate Frontend

== Importazione Paziente Esistente ==

Doctor -> Frontend: Richiede importazione paziente tramite UUID
activate Frontend

Frontend -> API: POST /api/patients/import
activate API

API -> DB: Verifica esistenza UUID
activate DB
DB --> API: Paziente trovato
deactivate DB

API -> DB: Verifica associazione esistente
activate DB
DB --> API: Nessuna associazione con questo medico
deactivate DB

API -> DB: Crea associazione DoctorPatient
activate DB
DB --> API: Associazione creata
deactivate DB

API -> Audit: log_patient_import(doctor, patient)
activate Audit
Audit -> DB: Insert audit log
DB --> Audit: Conferma
Audit --> API: OK
deactivate Audit

API --> Frontend: Conferma importazione
deactivate API

Frontend --> Doctor: Mostra conferma e dettagli paziente
deactivate Frontend

note right
  Il paziente mantiene tutte le sue
  connessioni alle piattaforme sanitarie
  esistenti quando viene importato
  da un medico all'altro
end note

@enduml
