@startuml VitaLink - Component Diagram

' Stile e configurazione
skinparam componentStyle uml2
skinparam component {
    BackgroundColor #f0f0f0
    BorderColor #555555
}
skinparam interface {
    BackgroundColor White
    BorderColor #555555
}
skinparam arrow {
    Color #666666
    FontSize 12
}

title VitaLink - Component Diagram

' Componenti principali
package "VitaLink Application" {
    component [Frontend / User Interface] as UI
    component [Authentication Module] as Auth
    component [Patient Management] as PatientMgmt
    component [Health Platform Integration] as HealthInt
    component [Vital Signs Monitoring] as VitalMon
    component [Observation System] as Obs
    component [Audit System] as Audit
    component [Reporting Module] as Report
    component [Data Access Layer] as DAL
    component [Language Support] as Lang
    
    ' Interfacce
    interface "Web Interface" as WebUI
    interface "API Interface" as API
    interface "Authentication" as AuthInt
    interface "Patient Data" as PatientInt
    interface "Health Platform API" as HealthAPI
    interface "Database" as DB
    
    ' Relazioni tra componenti
    UI -down-> WebUI
    UI -down-> API
    WebUI -down-> Auth
    API -down-> Auth
    
    AuthInt <-down- Auth
    
    Auth -down-> DAL
    PatientMgmt -down-> DAL
    HealthInt -down-> DAL
    VitalMon -down-> DAL
    Obs -down-> DAL
    Audit -down-> DAL
    Report -down-> DAL
    
    PatientInt <-down- PatientMgmt
    PatientMgmt <-down- VitalMon
    PatientMgmt <-down- Obs
    PatientMgmt <-down- Report
    
    HealthAPI <-down- HealthInt
    VitalMon <-down- HealthInt
    
    PatientMgmt ...> Audit : "logs actions"
    HealthInt ...> Audit : "logs connections"
    VitalMon ...> Audit : "logs access"
    Obs ...> Audit : "logs changes"
    Report ...> Audit : "logs generation"
    
    Lang <-down- UI
    Lang <-down- PatientMgmt
    Lang <-down- Report
    Lang <-down- Obs
}

' Sistemi esterni
node "External Health Platforms" {
    component [Fitbit API] as FitbitAPI
    component [Google Fit API] as GoogleFitAPI
    component [Apple Health API] as AppleHealthAPI
    
    interface "OAuth 2.0" as OAuth
    interface "REST APIs" as RestAPI
    
    FitbitAPI -- OAuth
    FitbitAPI -- RestAPI
    GoogleFitAPI -- OAuth
    GoogleFitAPI -- RestAPI
    AppleHealthAPI -- OAuth
    AppleHealthAPI -- RestAPI
}

' Cache temporanea
component "Temporary Data Cache" as Cache {
    component [Vital Signs Cache] as VitalsCache
    component [Rate Limiter] as RateLimiter
}

' Database
database "PostgreSQL" as Database {
    component [Patients] as PatientDB
    component [Doctors] as DoctorDB
    component [Vital Signs] as VitalDB
    component [Notes] as NoteDB
    component [Observations] as ObsDB
    component [Audit Logs] as AuditDB
    component [Health Links] as LinkDB
}

' Connessioni esterne
HealthInt -- OAuth : << uses >>
HealthInt -- RestAPI : << calls >>
HealthInt --> FitbitAPI
HealthInt --> GoogleFitAPI
HealthInt --> AppleHealthAPI

' Connessione alla cache
HealthInt ..> Cache : << uses temporarily >>
VitalMon ..> Cache : << reads from >>

' Connessione al database
DAL --> Database
DAL ..> PatientDB : << accesses >>
DAL ..> DoctorDB : << accesses >>
DAL ..> ObsDB : << accesses >>
DAL ..> NoteDB : << accesses >>
DAL ..> AuditDB : << accesses >>
DAL ..> LinkDB : << accesses >>

' Note esplicative
note right of VitalsCache
  I dati dei parametri vitali sono memorizzati
  temporaneamente nella cache e vengono
  eliminati quando la sessione termina
end note

note right of RateLimiter
  Gestisce i limiti di chiamate API
  di ciascuna piattaforma (es. 150/ora per Fitbit)
end note

note right of PatientDB
  I pazienti sono identificati tramite UUID
  permettendo l'importazione tra medici
end note

note right of LinkDB
  Link temporanei per l'autorizzazione
  OAuth con le piattaforme sanitarie
end note

note bottom of HealthInt
  Gestisce l'integrazione con tutte le
  piattaforme sanitarie supportate
  tramite OAuth 2.0
end note

@enduml
