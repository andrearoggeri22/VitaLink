@startuml "DiagrammaClassiCompleto"

' Class Diagram for VitaLink application
title Diagramma delle Classi Completo - VitaLink

' Packages to organize classes
package "Core & Configuration" {
    ' Base Classes
    abstract class Base {
    }
    
    class ApplicationConfig << (S,lightblue) >> {
        -debug: Boolean
        -host: String
        -port: Integer
        -sqlalchemy_database_uri: String
        -sqlalchemy_track_modifications: Boolean
        -jwt_secret_key: String
        -babel_default_locale: String
        -languages: Dictionary
    }
    
    class FlaskApp << (S,lightblue) >> {
        +secret_key: String
        +config: ApplicationConfig
        +run(): void
    }
}

package "Authentication" {
    ' Forms and User Management
    class RegistrationForm {
        +email: EmailField
        +first_name: StringField
        +last_name: StringField
        +specialty: StringField
        +password: PasswordField
        +confirm_password: PasswordField
        +validate(): Boolean
    }
    
    ' Flask-Login integration
    class UserMixin {
        +is_authenticated(): Boolean
        +is_active(): Boolean
        +is_anonymous(): Boolean
        +get_id(): String
    }
    
    ' Decorators 
    class AuthDecorators << (D,orchid) >> {
        +login_required(fn): Function
        +doctor_required(fn): Function
        +api_doctor_required(fn): Function
    }
}

package "Data Models" {
    ' Enums
    enum VitalSignType {
        +HEART_RATE
        +OXYGEN_SATURATION
        +BREATHING_RATE
        +WEIGHT
        +TEMPERATURE_CORE
        +TEMPERATURE_SKIN
        +STEPS
        +CALORIES
        +DISTANCE
        +ACTIVE_MINUTES
        +SLEEP_DURATION
        +FLOORS_CLIMBED
        +ELEVATION
        +ACTIVITY_CALORIES
        +CALORIES_BMR
        +MINUTES_SEDENTARY
        +MINUTES_LIGHTLY_ACTIVE
        +MINUTES_FAIRLY_ACTIVE
        +CALORIES_IN
        +WATER
    }

    enum HealthPlatform {
        +FITBIT
        +GOOGLE_HEALTH_CONNECT
        +APPLE_HEALTH
    }

    enum ActionType {
        +CREATE
        +UPDATE
        +DELETE
        +VIEW
        +EXPORT
        +GENERATE_LINK
        +CONNECT
        +DISCONNECT
        +SYNC
        +IMPORT
    }

    enum EntityType {
        +PATIENT
        +VITAL_SIGN
        +NOTE
        +REPORT
        +HEALTH_PLATFORM
        +HEALTH_LINK
        +OBSERVATION
    }

    ' Main Classes
    class Doctor {
        +id: Integer [PK]
        +email: String
        +password_hash: String
        +first_name: String
        +last_name: String
        +specialty: String
        +created_at: DateTime
        +updated_at: DateTime
        --
        +set_password(password: String): void
        +check_password(password: String): Boolean
        +to_dict(): Dictionary
        +get_patients(): List<Patient>
        +add_patient(patient: Patient): void
        +remove_patient(patient: Patient): void
    }

    class Patient {
        +id: Integer [PK]
        +uuid: String
        +first_name: String
        +last_name: String
        +date_of_birth: Date
        +gender: String
        +contact_number: String
        +email: String
        +address: Text
        +created_at: DateTime
        +updated_at: DateTime
        +connected_platform: HealthPlatform
        +platform_access_token: String
        +platform_refresh_token: String
        +platform_token_expires_at: DateTime
        --
        +to_dict(): Dictionary
        +get_vital_observations(vital_type: VitalSignType, start_date: DateTime, end_date: DateTime): List
        +get_notes(): List<Note>
    }

    class DoctorPatient {
        +doctor_id: Integer [PK, FK]
        +patient_id: Integer [PK, FK]
        +assigned_date: DateTime
    }

    class Note {
        +id: Integer [PK]
        +patient_id: Integer [FK]
        +doctor_id: Integer [FK]
        +content: Text
        +created_at: DateTime
        +updated_at: DateTime
        --
        +to_dict(): Dictionary
    }

    class VitalObservation {
        +id: Integer [PK]
        +patient_id: Integer [FK]
        +doctor_id: Integer [FK]
        +vital_type: VitalSignType
        +content: Text
        +start_date: DateTime
        +end_date: DateTime
        +created_at: DateTime
        +updated_at: DateTime
        --
        +to_dict(): Dictionary
    }

    class AuditLog {
        +id: Integer [PK]
        +doctor_id: Integer [FK]
        +timestamp: DateTime
        +action_type: ActionType
        +entity_type: EntityType
        +entity_id: Integer
        +details: Text
        +patient_id: Integer [FK]
        +ip_address: String
        --
        +__init__(doctor_id, action_type, entity_type, entity_id, details, patient_id, ip_address)
        +get_details(): Dictionary
        +to_dict(): Dictionary
    }

    class HealthPlatformLink {
        +id: Integer [PK]
        +uuid: String
        +patient_id: Integer [FK]
        +doctor_id: Integer [FK]
        +created_at: DateTime
        +expires_at: DateTime
        +used: Boolean
        +platform: HealthPlatform
        --
        +is_expired(): Boolean
        +to_dict(): Dictionary
    }
}

package "Service Modules" {
    class ObservationsService << (S,lightblue) >> {
        +get_web_observations(patient_id): List
        +add_web_observation(): VitalObservation
        +update_web_observation(observation_id): VitalObservation
        +delete_web_observation(observation_id): void
    }

    class HealthPlatformsService << (S,lightblue) >> {
        +vitals_cache: Dictionary
        +api_rate_limit: Dictionary
        --
        +generate_platform_link(patient_id, platform): HealthPlatformLink
        +get_link_by_uuid(uuid_string): HealthPlatformLink
        +get_fitbit_authorization_url(patient_id): String
        +exchange_fitbit_code_for_token(code): Dictionary
        +refresh_fitbit_token(refresh_token): Dictionary
        +save_fitbit_tokens(patient, tokens): void
        +ensure_fresh_token(patient): Boolean
        +check_rate_limit(): Boolean
        +increment_api_call_counter(): void
        +get_fitbit_data(patient, endpoint_config, period): Dictionary
        +process_fitbit_data(data, vital_type): Array
        +process_standard_list(data_array): Array
        +process_nested_value_list(data_array): Array
        +process_heart_rate_data(data_array): Array
        +get_vitals_data(patient, vital_type, period): Dictionary
        +get_processed_fitbit_data(patient, vital_type, period): Dictionary
    }
    
    class ReportsService << (S,lightblue) >> {
        +PERIOD_DAYS: Dictionary
        --
        +generate_specific_report(patient, doctor, notes, vital_types, charts, observations, summary, language): PDF
        +create_vital_chart(data, title, subtitle): Image
    }
    
    class EmailService << (S,lightblue) >> {
        +MJ_APIKEY: String
        +MJ_APIKEY_SECRET: String
        --
        +send_report_email(doctor, patient, pdf_buffer, filename, language): Tuple<Boolean, String>
    }
    
    class LanguageService << (S,lightblue) >> {
        +change_language(lang_code): Redirect
    }
    
    class AuditService << (S,lightblue) >> {
        +log_action(doctor_id, action_type, entity_type, entity_id, details, patient_id, ip_address): AuditLog
        +log_patient_creation(doctor, patient): AuditLog
        +log_patient_update(doctor, patient): AuditLog
        +log_patient_delete(doctor, patient): AuditLog
        +log_vital_creation(doctor, vital_sign, patient_id): AuditLog
        +log_note_creation(doctor, note): AuditLog
        +log_note_delete(doctor, note): AuditLog
        +log_report_generation(doctor, patient): AuditLog
        +log_patient_view(doctor, patient): AuditLog
        +log_patient_import(doctor, patient): AuditLog
        +log_health_link_creation(doctor, link): AuditLog
        +log_platform_connection(doctor, patient, platform): AuditLog
        +log_platform_disconnection(doctor, patient, platform): AuditLog
        +log_data_sync(doctor, patient, vital_type): AuditLog
        +log_observation_creation(doctor, observation): AuditLog
        +log_observation_update(doctor, observation): AuditLog
        +log_observation_delete(doctor, observation): AuditLog
    }
    
    class MigrationService << (S,lightblue) >> {
        +run_migration(): void
    }
    
    class UtilityService << (S,lightblue) >> {
        +validate_email(email): Boolean
        +is_valid_password(password): Tuple<Boolean, String>
        +validate_uuid(uuid_string): Boolean
        +parse_date(date_string): Date
        +to_serializable_dict(obj): Dictionary
    }
}

package "API & Web Controllers" {
    class APIController << (C,orange) >> {
        +get_patients(doctor): JSON
        +get_patient(doctor, patient_id): JSON
        +get_vitals(doctor, patient_id): JSON
        +get_notes(doctor, patient_id): JSON
        +add_note(doctor, patient_id): JSON
        +delete_note(doctor, note_id): JSON
        +get_observations(doctor, patient_id): JSON
        +add_observation(doctor): JSON
        +update_observation(doctor, observation_id): JSON
        +delete_observation(doctor, observation_id): JSON
        +import_patient(doctor): JSON
    }
    
    class ViewController << (C,orange) >> {
        +index(): HTML
        +dashboard(): HTML
        +patients(): HTML
        +new_patient(): HTML
        +patient_detail(patient_id): HTML
        +edit_patient(patient_id): HTML
        +delete_patient(patient_id): HTML
        +patient_vitals(patient_id): HTML
        +add_note(patient_id): HTML
        +delete_note(note_id): HTML
        +profile(): HTML
        +create_specific_patient_report(patient_id): HTML
    }
    
    class AuditController << (C,orange) >> {
        +get_audit_logs(): HTML
        +get_audit_stats(): JSON
    }
    
    class HealthPlatformController << (C,orange) >> {
        +create_link(patient_id): JSON
        +connect_platform(patient_id, platform): HTML
        +start_auth(link_id): HTML
        +oauth_callback(): HTML
        +check_connection(patient_id): JSON
        +disconnect_platform(patient_id): JSON
        +get_data(patient_id, vital_type): JSON
    }
    
    class AuthController << (C,orange) >> {
        +register(): HTML
        +login(): HTML
        +logout(): Redirect
        +api_login(): JSON
        +refresh_token(): JSON
    }
}

package "Extensions & Integrations" {
    class SQLAlchemy << (E,yellow) >> {
        +Model
        +Column
        +relationship
        +session
    }
    
    class FlaskLogin << (E,yellow) >> {
        +LoginManager
        +current_user
        +login_user()
        +logout_user()
    }
    
    class FlaskJWT << (E,yellow) >> {
        +JWTManager
        +create_access_token()
        +create_refresh_token()
        +get_jwt_identity()
    }
    
    class FlaskBabel << (E,yellow) >> {
        +Babel
        +gettext()
        +lazy_gettext()
    }
    
    class FlaskMigrate << (E,yellow) >> {
        +Migrate
    }
    
    class FitbitAPI << (E,yellow) >> {
        +API_BASE_URL
        +ENDPOINTS
        +OAuth2
    }
}

' Inheritance Relationships
Doctor --|> UserMixin
Doctor --|> Base
Patient --|> Base
DoctorPatient --|> Base
Note --|> Base
VitalObservation --|> Base
AuditLog --|> Base
HealthPlatformLink --|> Base

' Relationships between Models
Doctor "1" -- "*" DoctorPatient : medico
Patient "1" -- "*" DoctorPatient : paziente
Doctor "1" -- "*" Note : creato da >
Patient "1" -- "*" Note : relativo a >
Doctor "1" -- "*" VitalObservation : creato da >
Patient "1" -- "*" VitalObservation : relativo a >
Doctor "1" -- "*" AuditLog : eseguito da >
Patient "0..1" -- "*" AuditLog : relativo a >
Doctor "1" -- "*" HealthPlatformLink : generato da >
Patient "1" -- "*" HealthPlatformLink : associato a >

VitalSignType -- VitalObservation : tipo >
HealthPlatform -- Patient : connesso a >
HealthPlatform -- HealthPlatformLink : piattaforma >
ActionType -- AuditLog : tipo azione >
EntityType -- AuditLog : tipo entità >

' Service Dependencies
HealthPlatformsService ..> HealthPlatformLink : genera
HealthPlatformsService ..> Patient : aggiorna
ReportsService ..> VitalObservation : usa
ReportsService ..> Note : usa
ObservationsService ..> VitalObservation : gestisce
AuditService ..> AuditLog : crea

' Controller Dependencies
APIController ..> HealthPlatformsService : utilizza
APIController ..> ObservationsService : utilizza
ViewController ..> ReportsService : utilizza
ViewController ..> Doctor : gestisce
ViewController ..> Patient : gestisce
AuditController ..> AuditService : utilizza
HealthPlatformController ..> HealthPlatformsService : utilizza
AuthController ..> Doctor : autentica

' Integration Relationships
Doctor ..> FlaskLogin : utilizza
FitbitAPI <.. HealthPlatformsService : integra
FlaskBabel <.. LanguageService : configura
FlaskMigrate <.. MigrationService : utilizza
SQLAlchemy <.. Base : estende
FlaskApp ..> FlaskLogin : configura
FlaskApp ..> FlaskJWT : configura
FlaskApp ..> FlaskBabel : configura
FlaskApp ..> FlaskMigrate : configura

@enduml