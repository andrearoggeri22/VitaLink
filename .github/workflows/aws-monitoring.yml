name: AWS Infrastructure Monitoring

on:
  schedule:
    # Run every 4 hours
    - cron: '0 */4 * * *'
  workflow_dispatch:
    inputs:
      stack_name:
        description: 'Stack name to monitor'
        required: false
        default: 'VitaLink-Stack-staging'
        type: string
      detailed_check:
        description: 'Perform detailed health checks'
        required: false
        default: true
        type: boolean

env:
  AWS_REGION: us-east-1

jobs:
  infrastructure-check:
    name: Infrastructure Health Check
    runs-on: ubuntu-latest
    
    outputs:
      stack-status: ${{ steps.stack-check.outputs.status }}
      application-healthy: ${{ steps.health-check.outputs.healthy }}
      
    steps:
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Check CloudFormation stacks
      id: stack-check
      run: |
        echo "Checking CloudFormation stacks..."
        
        # Default stack names to check
        STACKS=("VitaLink-Stack-staging" "VitaLink-Stack-production")
        
        # If specific stack provided, check only that one
        if [ -n "${{ github.event.inputs.stack_name }}" ]; then
          STACKS=("${{ github.event.inputs.stack_name }}")
        fi
        
        ALL_HEALTHY=true
        STACK_STATUSES=""
        
        for STACK in "${STACKS[@]}"; do
          echo "Checking stack: $STACK"
          
          if aws cloudformation describe-stacks --stack-name "$STACK" 2>/dev/null; then
            STATUS=$(aws cloudformation describe-stacks --stack-name "$STACK" --query 'Stacks[0].StackStatus' --output text)
            echo "Stack $STACK exists with status: $STATUS"
            
            if [[ "$STATUS" != "CREATE_COMPLETE" && "$STATUS" != "UPDATE_COMPLETE" ]]; then
              echo "Stack $STACK is not in a healthy state: $STATUS"
              ALL_HEALTHY=false
              
              # Get recent events for problematic stacks
              echo "Recent events for $STACK:"
              aws cloudformation describe-stack-events --stack-name "$STACK" --max-items 5 --query 'StackEvents[].[Timestamp,LogicalResourceId,ResourceStatus,ResourceStatusReason]' --output table
            fi
            
            STACK_STATUSES="${STACK_STATUSES}${STACK}:${STATUS};"
          else
            echo "Stack $STACK not found"
            ALL_HEALTHY=false
            STACK_STATUSES="${STACK_STATUSES}${STACK}:NOT_FOUND;"
          fi
        done
        
        echo "status=$ALL_HEALTHY" >> $GITHUB_OUTPUT
        echo "stack-statuses=$STACK_STATUSES" >> $GITHUB_OUTPUT

    - name: Check ECS services
      if: steps.stack-check.outputs.status == 'true'
      run: |
        echo "Checking ECS services..."
        
        # Get all ECS clusters
        CLUSTERS=$(aws ecs list-clusters --query 'clusterArns[]' --output text)
        
        for CLUSTER_ARN in $CLUSTERS; do
          CLUSTER_NAME=$(basename "$CLUSTER_ARN")
          echo "Checking cluster: $CLUSTER_NAME"
          
          # Get services in cluster
          SERVICES=$(aws ecs list-services --cluster "$CLUSTER_NAME" --query 'serviceArns[]' --output text)
          
          if [ -n "$SERVICES" ]; then
            for SERVICE_ARN in $SERVICES; do
              SERVICE_NAME=$(basename "$SERVICE_ARN")
              echo "Checking service: $SERVICE_NAME"
              
              # Get service details
              SERVICE_INFO=$(aws ecs describe-services --cluster "$CLUSTER_NAME" --services "$SERVICE_NAME")
              RUNNING_COUNT=$(echo "$SERVICE_INFO" | jq -r '.services[0].runningCount')
              DESIRED_COUNT=$(echo "$SERVICE_INFO" | jq -r '.services[0].desiredCount')
              
              echo "Service $SERVICE_NAME: $RUNNING_COUNT/$DESIRED_COUNT tasks running"
              
              if [ "$RUNNING_COUNT" -lt "$DESIRED_COUNT" ]; then
                echo "Service $SERVICE_NAME has fewer running tasks than desired"
              fi
            done
          else
            echo "ℹNo services found in cluster $CLUSTER_NAME"
          fi
        done

    - name: Check RDS instances
      if: steps.stack-check.outputs.status == 'true'
      run: |
        echo "Checking RDS instances..."
        
        # Get all RDS instances
        INSTANCES=$(aws rds describe-db-instances --query 'DBInstances[].DBInstanceIdentifier' --output text)
        
        if [ -n "$INSTANCES" ]; then
          for INSTANCE in $INSTANCES; do
            echo "Checking RDS instance: $INSTANCE"
            
            STATUS=$(aws rds describe-db-instances --db-instance-identifier "$INSTANCE" --query 'DBInstances[0].DBInstanceStatus' --output text)
            echo "RDS instance $INSTANCE status: $STATUS"
            
            if [ "$STATUS" != "available" ]; then
              echo "RDS instance $INSTANCE is not available"
            fi
          done
        else
          echo "ℹNo RDS instances found"
        fi

    - name: Check Load Balancers
      if: steps.stack-check.outputs.status == 'true'
      run: |
        echo "Checking Application Load Balancers..."
        
        # Get all ALBs
        ALBS=$(aws elbv2 describe-load-balancers --query 'LoadBalancers[].LoadBalancerArn' --output text)
        
        if [ -n "$ALBS" ]; then
          for ALB in $ALBS; do
            ALB_NAME=$(aws elbv2 describe-load-balancers --load-balancer-arns "$ALB" --query 'LoadBalancers[0].LoadBalancerName' --output text)
            ALB_STATE=$(aws elbv2 describe-load-balancers --load-balancer-arns "$ALB" --query 'LoadBalancers[0].State.Code' --output text)
            
            echo "ALB $ALB_NAME status: $ALB_STATE"
            
            if [ "$ALB_STATE" != "active" ]; then
              echo "ALB $ALB_NAME is not active"
            fi
            
            # Check target groups
            TARGET_GROUPS=$(aws elbv2 describe-target-groups --load-balancer-arn "$ALB" --query 'TargetGroups[].TargetGroupArn' --output text)
            
            for TG in $TARGET_GROUPS; do
              TG_NAME=$(aws elbv2 describe-target-groups --target-group-arns "$TG" --query 'TargetGroups[0].TargetGroupName' --output text)
              
              # Check target health
              HEALTHY_TARGETS=$(aws elbv2 describe-target-health --target-group-arn "$TG" --query 'TargetHealthDescriptions[?TargetHealth.State==`healthy`]' --output text | wc -l)
              TOTAL_TARGETS=$(aws elbv2 describe-target-health --target-group-arn "$TG" --query 'TargetHealthDescriptions' --output text | wc -l)
              
              echo "Target Group $TG_NAME: $HEALTHY_TARGETS/$TOTAL_TARGETS healthy targets"
            done
          done
        else
          echo "ℹNo Application Load Balancers found"
        fi

    - name: Application health check
      if: steps.stack-check.outputs.status == 'true' && github.event.inputs.detailed_check != 'false'
      id: health-check
      run: |
        echo "Performing application health checks..."
        
        # Get stack outputs to find application URLs
        STACKS=("VitaLink-Stack-staging" "VitaLink-Stack-production")
        
        if [ -n "${{ github.event.inputs.stack_name }}" ]; then
          STACKS=("${{ github.event.inputs.stack_name }}")
        fi
        
        ALL_HEALTHY=true
        
        for STACK in "${STACKS[@]}"; do
          if aws cloudformation describe-stacks --stack-name "$STACK" 2>/dev/null; then
            echo "Checking health for stack: $STACK"
            
            # Get health check URL from stack outputs
            HEALTH_URL=$(aws cloudformation describe-stacks --stack-name "$STACK" --query 'Stacks[0].Outputs[?OutputKey==`HealthCheckURL`].OutputValue' --output text)
            APP_URL=$(aws cloudformation describe-stacks --stack-name "$STACK" --query 'Stacks[0].Outputs[?OutputKey==`VitaLinkURL`].OutputValue' --output text)
            
            if [ -n "$HEALTH_URL" ] && [ "$HEALTH_URL" != "None" ]; then
              echo "Testing health endpoint: $HEALTH_URL"
              
              if curl -s -f --max-time 10 "$HEALTH_URL" > /dev/null; then
                echo "Health check passed for $STACK"
                HEALTH_RESPONSE=$(curl -s --max-time 10 "$HEALTH_URL")
                echo "Health response: $HEALTH_RESPONSE"
              else
                echo "Health check failed for $STACK"
                ALL_HEALTHY=false
              fi
            else
              echo "No health check URL found for $STACK"
            fi
            
            if [ -n "$APP_URL" ] && [ "$APP_URL" != "None" ]; then
              echo "Testing main endpoint: $APP_URL"
              
              HTTP_STATUS=$(curl -s -o /dev/null -w "%{http_code}" --max-time 10 "$APP_URL")
              echo "Main endpoint HTTP status: $HTTP_STATUS"
              
              if [ "$HTTP_STATUS" -ge 200 ] && [ "$HTTP_STATUS" -lt 400 ]; then
                echo "Main endpoint accessible for $STACK"
              else
                echo "Main endpoint returned status $HTTP_STATUS for $STACK"
              fi
            fi
          fi
        done
        
        echo "healthy=$ALL_HEALTHY" >> $GITHUB_OUTPUT

  cost-analysis:
    name: AWS Cost Analysis
    runs-on: ubuntu-latest
    needs: infrastructure-check
    
    steps:
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Get cost information
      run: |
        echo "Checking AWS costs..."
        
        # Get current month costs
        START_DATE=$(date -d "$(date +'%Y-%m-01')" +'%Y-%m-%d')
        END_DATE=$(date +'%Y-%m-%d')
        
        echo "Cost period: $START_DATE to $END_DATE"
        
        # Note: Cost Explorer API might not be available in AWS Education
        # This is a placeholder for cost monitoring
        echo "ℹCost analysis requires AWS Cost Explorer API access"
        echo "Consider manually checking AWS Billing Dashboard for cost information"
        
        # Alternative: Check resource counts as a proxy for costs
        echo "Resource inventory:"
        
        # Count EC2 instances
        EC2_COUNT=$(aws ec2 describe-instances --query 'Reservations[].Instances[?State.Name==`running`]' --output text | wc -l)
        echo "Running EC2 instances: $EC2_COUNT"
        
        # Count RDS instances
        RDS_COUNT=$(aws rds describe-db-instances --query 'DBInstances[?DBInstanceStatus==`available`]' --output text | wc -l)
        echo "Available RDS instances: $RDS_COUNT"
        
        # Count ALBs
        ALB_COUNT=$(aws elbv2 describe-load-balancers --query 'LoadBalancers[?State.Code==`active`]' --output text | wc -l)
        echo "Active Load Balancers: $ALB_COUNT"

  create-report:
    name: Create Monitoring Report
    runs-on: ubuntu-latest
    needs: [infrastructure-check, cost-analysis]
    if: always()
    
    steps:
    - name: Create monitoring summary
      run: |
        echo "# VitaLink Infrastructure Monitoring Report" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Monitoring Date**: $(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # Infrastructure status
        if [ "${{ needs.infrastructure-check.outputs.stack-status }}" == "true" ]; then
          echo "## Infrastructure Status: Healthy" >> $GITHUB_STEP_SUMMARY
        else
          echo "## Infrastructure Status: Issues Detected" >> $GITHUB_STEP_SUMMARY
        fi
        
        # Application health
        if [ "${{ needs.infrastructure-check.outputs.application-healthy }}" == "true" ]; then
          echo "## Application Health: Good" >> $GITHUB_STEP_SUMMARY
        else
          echo "## Application Health: Issues Detected" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## Monitoring Details" >> $GITHUB_STEP_SUMMARY
        echo "- CloudFormation stacks checked" >> $GITHUB_STEP_SUMMARY
        echo "- ECS services monitored" >> $GITHUB_STEP_SUMMARY
        echo "- RDS instances verified" >> $GITHUB_STEP_SUMMARY
        echo "- Load balancer health confirmed" >> $GITHUB_STEP_SUMMARY
        echo "- Application endpoints tested" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## Next Actions" >> $GITHUB_STEP_SUMMARY
        
        if [ "${{ needs.infrastructure-check.outputs.stack-status }}" != "true" ] || [ "${{ needs.infrastructure-check.outputs.application-healthy }}" != "true" ]; then
          echo "- Review the detailed logs in this workflow run" >> $GITHUB_STEP_SUMMARY
          echo "- Check AWS CloudWatch for additional metrics" >> $GITHUB_STEP_SUMMARY
          echo "- Consider triggering a re-deployment if issues persist" >> $GITHUB_STEP_SUMMARY
        else
          echo "- No action required - all systems operating normally" >> $GITHUB_STEP_SUMMARY
        fi