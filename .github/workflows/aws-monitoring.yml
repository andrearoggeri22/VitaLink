name: AWS Infrastructure Monitoring

on:
  schedule:
    # Run every 30 minutes
    - cron: '*/30 8-18 * * 1-5'
  workflow_dispatch:
    inputs:
      detailed_check:
        description: 'Run detailed infrastructure check'
        required: true
        default: true
        type: boolean

env:
  AWS_REGION: us-east-1
  STACK_NAME: VitaLink-Stack

jobs:
  health-monitoring:
    name: Infrastructure Health Check
    runs-on: ubuntu-latest
    
    steps:
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Check CloudFormation stack health
      id: stack-health
      run: |
        echo "Checking CloudFormation stack health..."
        
        if aws cloudformation describe-stacks --stack-name ${{ env.STACK_NAME }} > /dev/null 2>&1; then
          STACK_STATUS=$(aws cloudformation describe-stacks --stack-name ${{ env.STACK_NAME }} --query 'Stacks[0].StackStatus' --output text)
          echo "stack-exists=true" >> $GITHUB_OUTPUT
          echo "stack-status=$STACK_STATUS" >> $GITHUB_OUTPUT
          
          if [[ "$STACK_STATUS" == "CREATE_COMPLETE" || "$STACK_STATUS" == "UPDATE_COMPLETE" ]]; then
            echo "stack-healthy=true" >> $GITHUB_OUTPUT
            echo "Stack is healthy: $STACK_STATUS"
          else
            echo "stack-healthy=false" >> $GITHUB_OUTPUT
            echo "Stack is not in healthy state: $STACK_STATUS"
          fi
        else
          echo "stack-exists=false" >> $GITHUB_OUTPUT
          echo "stack-healthy=false" >> $GITHUB_OUTPUT
          echo "Stack not found"
        fi

    - name: Get application endpoints
      if: steps.stack-health.outputs.stack-exists == 'true'
      id: get-endpoints
      run: |
        echo "Retrieving application endpoints..."
        
        OUTPUTS=$(aws cloudformation describe-stacks --stack-name ${{ env.STACK_NAME }} --query 'Stacks[0].Outputs')
        
        APP_URL=$(echo $OUTPUTS | jq -r '.[] | select(.OutputKey=="VitaLinkURL") | .OutputValue')
        HEALTH_URL=$(echo $OUTPUTS | jq -r '.[] | select(.OutputKey=="HealthCheckURL") | .OutputValue')
        
        echo "application-url=$APP_URL" >> $GITHUB_OUTPUT
        echo "health-url=$HEALTH_URL" >> $GITHUB_OUTPUT
        
        echo "Application URL: $APP_URL"
        echo "Health Check URL: $HEALTH_URL"

    - name: Application health check
      if: steps.get-endpoints.outputs.health-url != 'null'
      id: app-health
      run: |
        echo "Checking application health..."
        HEALTH_URL="${{ steps.get-endpoints.outputs.health-url }}"
        
        # Perform health check with timeout
        if curl -f -s --max-time 10 "$HEALTH_URL" > /dev/null; then
          echo "app-healthy=true" >> $GITHUB_OUTPUT
          HEALTH_RESPONSE=$(curl -s --max-time 10 "$HEALTH_URL")
          echo "health-response=$HEALTH_RESPONSE" >> $GITHUB_OUTPUT
          echo "Application is responding: $HEALTH_RESPONSE"
        else
          echo "app-healthy=false" >> $GITHUB_OUTPUT
          echo "Application health check failed"
          
          # Try to get more details
          HTTP_CODE=$(curl -s -o /dev/null -w "%{http_code}" --max-time 10 "$HEALTH_URL" || echo "000")
          echo "HTTP response code: $HTTP_CODE"
        fi

    - name: ECS service check
      if: steps.stack-health.outputs.stack-exists == 'true' && github.event.inputs.detailed_check == 'true'
      id: ecs-check
      run: |
        echo "Checking ECS service status..."
        
        # Get ECS cluster name from stack outputs
        OUTPUTS=$(aws cloudformation describe-stacks --stack-name ${{ env.STACK_NAME }} --query 'Stacks[0].Outputs')
        ECS_CLUSTER=$(echo $OUTPUTS | jq -r '.[] | select(.OutputKey=="ECSClusterName") | .OutputValue')
        
        if [ "$ECS_CLUSTER" != "null" ]; then
          # Find the service (assuming it follows the naming pattern)
          SERVICES=$(aws ecs list-services --cluster "$ECS_CLUSTER" --query 'serviceArns' --output text)
          
          for SERVICE_ARN in $SERVICES; do
            SERVICE_NAME=$(basename "$SERVICE_ARN")
            SERVICE_STATUS=$(aws ecs describe-services --cluster "$ECS_CLUSTER" --services "$SERVICE_NAME" --query 'services[0].status' --output text)
            RUNNING_COUNT=$(aws ecs describe-services --cluster "$ECS_CLUSTER" --services "$SERVICE_NAME" --query 'services[0].runningCount' --output text)
            DESIRED_COUNT=$(aws ecs describe-services --cluster "$ECS_CLUSTER" --services "$SERVICE_NAME" --query 'services[0].desiredCount' --output text)
            
            echo "Service: $SERVICE_NAME"
            echo "Status: $SERVICE_STATUS"
            echo "Tasks: $RUNNING_COUNT/$DESIRED_COUNT"
            
            if [ "$SERVICE_STATUS" == "ACTIVE" ] && [ "$RUNNING_COUNT" -eq "$DESIRED_COUNT" ]; then
              echo "ecs-healthy=true" >> $GITHUB_OUTPUT
              echo "ECS service is healthy"
            else
              echo "ecs-healthy=false" >> $GITHUB_OUTPUT
              echo "ECS service needs attention"
            fi
          done
        fi

    - name: RDS database check
      if: steps.stack-health.outputs.stack-exists == 'true' && github.event.inputs.detailed_check == 'true'
      id: rds-check
      run: |
        echo "Checking RDS database status..."
        
        # Get database endpoint from stack outputs
        OUTPUTS=$(aws cloudformation describe-stacks --stack-name ${{ env.STACK_NAME }} --query 'Stacks[0].Outputs')
        DB_ENDPOINT=$(echo $OUTPUTS | jq -r '.[] | select(.OutputKey=="DatabaseEndpoint") | .OutputValue')
        
        if [ "$DB_ENDPOINT" != "null" ]; then
          # Extract DB instance identifier from endpoint
          DB_INSTANCE=$(echo "$DB_ENDPOINT" | cut -d'.' -f1)
          
          DB_STATUS=$(aws rds describe-db-instances --db-instance-identifier "$DB_INSTANCE" --query 'DBInstances[0].DBInstanceStatus' --output text 2>/dev/null || echo "not_found")
          
          if [ "$DB_STATUS" == "available" ]; then
            echo "rds-healthy=true" >> $GITHUB_OUTPUT
            echo "RDS database is available"
          else
            echo "rds-healthy=false" >> $GITHUB_OUTPUT
            echo "RDS database status: $DB_STATUS"
          fi
        fi

    - name: Load balancer check
      if: steps.stack-health.outputs.stack-exists == 'true' && github.event.inputs.detailed_check == 'true'
      id: alb-check
      run: |
        echo "Checking Application Load Balancer..."
        
        # Get load balancer DNS from stack outputs
        OUTPUTS=$(aws cloudformation describe-stacks --stack-name ${{ env.STACK_NAME }} --query 'Stacks[0].Outputs')
        LB_DNS=$(echo $OUTPUTS | jq -r '.[] | select(.OutputKey=="LoadBalancerDNS") | .OutputValue')
        
        if [ "$LB_DNS" != "null" ]; then
          # Find load balancer by DNS name
          LB_ARN=$(aws elbv2 describe-load-balancers --query "LoadBalancers[?DNSName=='$LB_DNS'].LoadBalancerArn" --output text)
          
          if [ -n "$LB_ARN" ]; then
            LB_STATE=$(aws elbv2 describe-load-balancers --load-balancer-arns "$LB_ARN" --query 'LoadBalancers[0].State.Code' --output text)
            
            if [ "$LB_STATE" == "active" ]; then
              echo "alb-healthy=true" >> $GITHUB_OUTPUT
              echo "Load balancer is active"
              
              # Check target group health
              TG_ARNS=$(aws elbv2 describe-target-groups --load-balancer-arn "$LB_ARN" --query 'TargetGroups[*].TargetGroupArn' --output text)
              
              for TG_ARN in $TG_ARNS; do
                HEALTHY_TARGETS=$(aws elbv2 describe-target-health --target-group-arn "$TG_ARN" --query 'TargetHealthDescriptions[?TargetHealth.State==`healthy`]' --output json | jq length)
                TOTAL_TARGETS=$(aws elbv2 describe-target-health --target-group-arn "$TG_ARN" --query 'TargetHealthDescriptions' --output json | jq length)
                
                echo "Target group health: $HEALTHY_TARGETS/$TOTAL_TARGETS healthy targets"
              done
            else
              echo "alb-healthy=false" >> $GITHUB_OUTPUT
              echo "Load balancer state: $LB_STATE"
            fi
          fi
        fi

    - name: Create monitoring report
      run: |
        cat >> $GITHUB_STEP_SUMMARY << EOF
        # VitaLink Infrastructure Monitoring Report
        
        ## Overall Health Status
        - **CloudFormation Stack**: ${{ steps.stack-health.outputs.stack-healthy == 'true' && 'Healthy' || 'Unhealthy' }}
        - **Application**: ${{ steps.app-health.outputs.app-healthy == 'true' && 'Responding' || 'Not responding' }}
        ${{ github.event.inputs.detailed_check == 'true' && format('- **ECS Service**: {0}', steps.ecs-check.outputs.ecs-healthy == 'true' && 'Healthy' || 'Needs attention') || '' }}
        ${{ github.event.inputs.detailed_check == 'true' && format('- **RDS Database**: {0}', steps.rds-check.outputs.rds-healthy == 'true' && 'Available' || 'Unavailable') || '' }}
        ${{ github.event.inputs.detailed_check == 'true' && format('- **Load Balancer**: {0}', steps.alb-check.outputs.alb-healthy == 'true' && 'Active' || 'Inactive') || '' }}
        
        ## Application Endpoints
        - **Application URL**: [${{ steps.get-endpoints.outputs.application-url }}](${{ steps.get-endpoints.outputs.application-url }})
        - **Health Check URL**: [${{ steps.get-endpoints.outputs.health-url }}](${{ steps.get-endpoints.outputs.health-url }})
        
        ## Stack Details
        - **Stack Name**: \`${{ env.STACK_NAME }}\`
        - **Stack Status**: \`${{ steps.stack-health.outputs.stack-status }}\`
        - **Check Time**: $(date -u)
        
        ${{ steps.app-health.outputs.health-response && format('## Health Response\n```json\n{0}\n```', steps.app-health.outputs.health-response) || '' }}
        
        ## Recommendations
        ${{ steps.stack-health.outputs.stack-healthy != 'true' && '- Check CloudFormation stack for errors' || '' }}
        ${{ steps.app-health.outputs.app-healthy != 'true' && '- Check ECS service logs and task health' || '' }}
        ${{ steps.ecs-check.outputs.ecs-healthy != 'true' && github.event.inputs.detailed_check == 'true' && '- Review ECS service configuration and scaling' || '' }}
        ${{ steps.rds-check.outputs.rds-healthy != 'true' && github.event.inputs.detailed_check == 'true' && '- Check RDS database status and connectivity' || '' }}
        ${{ steps.alb-check.outputs.alb-healthy != 'true' && github.event.inputs.detailed_check == 'true' && '- Review load balancer and target group configuration' || '' }}
        EOF

    - name: Send notification on failure
      if: steps.stack-health.outputs.stack-healthy != 'true' || steps.app-health.outputs.app-healthy != 'true'
      run: |
        echo "Infrastructure health issues detected!"
        echo "Stack healthy: ${{ steps.stack-health.outputs.stack-healthy }}"
        echo "App healthy: ${{ steps.app-health.outputs.app-healthy }}"
        
        # Here you could integrate with notification services like:
        # - Slack webhook
        # - Email notification
        # - PagerDuty
        # - etc.
        
        exit 1
