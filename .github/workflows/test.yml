name: 🧪 Test VitaLink Application

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master ]
  schedule:
    # Esegui i test ogni giorno alle 02:00 UTC
    - cron: '0 2 * * *'

jobs:
  lint-and-format:
    name: 🔍 Code Quality Checks
    runs-on: ubuntu-latest
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🐍 Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: 📦 Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: 📋 Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8 black isort mypy
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

      - name: 🎨 Check code formatting with Black
        run: |
          black --check --diff app/

      - name: 📦 Check import sorting with isort
        run: |
          isort --check-only --diff app/

      - name: 🔍 Lint with flake8
        run: |
          # Stop the build if there are Python syntax errors or undefined names
          flake8 app/ --count --select=E9,F63,F7,F82 --show-source --statistics
          # Exit-zero treats all errors as warnings
          flake8 app/ --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

      - name: 🎯 Type checking with mypy
        run: |
          mypy app/ --ignore-missing-imports || echo "Type checking completed with warnings"

  unit-tests:
    name: 🧪 Unit Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.10', '3.11']
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🐍 Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: 📦 Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-${{ matrix.python-version }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.python-version }}-pip-

      - name: 📋 Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov pytest-html pytest-xdist

      - name: 🧪 Run unit tests
        run: |
          if [ -d "tests" ]; then
            python -m pytest tests/ \
              -v \
              --cov=app \
              --cov-report=xml \
              --cov-report=html \
              --cov-report=term-missing \
              --html=reports/pytest_report.html \
              --self-contained-html \
              -n auto
          else
            echo "⚠️ No tests directory found, creating sample test structure"
            mkdir -p tests
            cat > tests/test_basic.py << EOF
          import sys
          import os
          sys.path.insert(0, os.path.join(os.path.dirname(__file__), '..'))

          def test_python_version():
              assert sys.version_info >= (3, 10)

          def test_imports():
              try:
                  import flask
                  import sqlalchemy
                  assert True
              except ImportError as e:
                  assert False, f"Import failed: {e}"
          EOF
            python -m pytest tests/ -v
          fi

      - name: 📊 Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          files: ./coverage.xml
          fail_ci_if_error: false
          verbose: true

      - name: 📋 Upload test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: test-results-${{ matrix.python-version }}
          path: |
            reports/
            htmlcov/
            coverage.xml

  docker-build-test:
    name: 🐳 Docker Build Test
    runs-on: ubuntu-latest
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🐳 Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 🏗️ Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: false
          tags: vitalink:test
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: 🔍 Test Docker image
        run: |
          # Crea un container temporaneo per testare l'immagine
          docker run -d --name vitalink-test -p 8080:5000 \
            -e DATABASE_URL="sqlite:///test.db" \
            -e FLASK_ENV="testing" \
            vitalink:test
          
          # Attendi che il container si avvii
          sleep 10
          
          # Testa che il container sia in esecuzione
          if docker ps | grep vitalink-test; then
            echo "✅ Container started successfully"
          else
            echo "❌ Container failed to start"
            docker logs vitalink-test
            exit 1
          fi
          
          # Pulisci
          docker stop vitalink-test
          docker rm vitalink-test

  security-scan:
    name: 🔒 Security Scanning
    runs-on: ubuntu-latest
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🐍 Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: 🔒 Run security checks with bandit
        run: |
          pip install bandit[toml]
          bandit -r app/ -f json -o bandit-report.json || true
          bandit -r app/

      - name: 🔍 Check dependencies for vulnerabilities
        run: |
          pip install safety
          safety check --json --output safety-report.json || true
          safety check

      - name: 📊 Upload security reports
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: security-reports
          path: |
            bandit-report.json
            safety-report.json

  integration-test:
    name: 🔗 Integration Tests
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: testpassword
          POSTGRES_USER: testuser
          POSTGRES_DB: vitalink_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🐍 Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: 📋 Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest

      - name: 🔗 Run integration tests
        env:
          DATABASE_URL: postgresql://testuser:testpassword@localhost:5432/vitalink_test
          FLASK_ENV: testing
        run: |
          if [ -d "tests/integration" ]; then
            python -m pytest tests/integration/ -v
          else
            echo "⚠️ No integration tests found, creating basic database connection test"
            mkdir -p tests/integration
            cat > tests/integration/test_database.py << EOF
          import os
          import pytest
          from sqlalchemy import create_engine, text

          def test_database_connection():
              database_url = os.getenv('DATABASE_URL')
              if database_url:
                  engine = create_engine(database_url)
                  with engine.connect() as connection:
                      result = connection.execute(text("SELECT 1"))
                      assert result.fetchone()[0] == 1
              else:
                  pytest.skip("DATABASE_URL not set")
          EOF
            python -m pytest tests/integration/ -v
          fi

  test-summary:
    name: 📊 Test Summary
    runs-on: ubuntu-latest
    needs: [lint-and-format, unit-tests, docker-build-test, security-scan, integration-test]
    if: always()
    
    steps:
      - name: 📊 Create test summary
        run: |
          cat >> $GITHUB_STEP_SUMMARY << EOF
          # 🧪 VitaLink Test Results Summary
          
          ## 📋 Test Status
          - **Code Quality**: ${{ needs.lint-and-format.result == 'success' && '✅ Passed' || '❌ Failed' }}
          - **Unit Tests**: ${{ needs.unit-tests.result == 'success' && '✅ Passed' || '❌ Failed' }}
          - **Docker Build**: ${{ needs.docker-build-test.result == 'success' && '✅ Passed' || '❌ Failed' }}
          - **Security Scan**: ${{ needs.security-scan.result == 'success' && '✅ Passed' || '⚠️ Issues Found' }}
          - **Integration Tests**: ${{ needs.integration-test.result == 'success' && '✅ Passed' || '❌ Failed' }}
          
          ## 🎯 Overall Status
          ${{ needs.lint-and-format.result == 'success' && needs.unit-tests.result == 'success' && needs.docker-build-test.result == 'success' && needs.integration-test.result == 'success' && '🎉 All tests passed!' || '⚠️ Some tests failed - check individual job results' }}
          
          ---
          **Commit**: ${{ github.sha }}
          **Branch**: ${{ github.ref_name }}
          EOF