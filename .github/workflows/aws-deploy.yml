name: Deploy VitaLink to AWS

on:
  push:
    branches: [ CLOUD_MOBILE_PROJECT ]
  workflow_dispatch:

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY: vitalink
  STACK_NAME: VitaLink-Stack
  DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
  ENVIRONMENT: production
  DESIRED_TASK_COUNT: 1

jobs:
  deploy:
    name: Deploy to AWS
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          if [ -f pyproject.toml ]; then pip install -e .; fi
      
      - name: Run tests
        run: |
          pytest -xvs || echo "Tests failed but continuing deployment"
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: ${{ env.AWS_REGION }}
      
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
      
      - name: Create ECR repository if not exists
        run: |
          aws ecr describe-repositories --repository-names $ECR_REPOSITORY || \
          aws ecr create-repository --repository-name $ECR_REPOSITORY
      
      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: latest
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
      
      - name: Validate CloudFormation template
        run: |
          aws cloudformation validate-template --template-body file://vitalink-infrastructure.yaml
      
      - name: Check if stack exists
        id: check-stack
        run: |
          if aws cloudformation describe-stacks --stack-name $STACK_NAME 2>/dev/null; then
            echo "::set-output name=stack_exists::true"
            echo "Stack already exists, will perform update"
          else
            echo "::set-output name=stack_exists::false"
            echo "Stack does not exist, will create new stack"
          fi
      
      - name: Delete stack if in failed state
        if: steps.check-stack.outputs.stack_exists == 'true'
        run: |
          STACK_STATUS=$(aws cloudformation describe-stacks --stack-name $STACK_NAME --query 'Stacks[0].StackStatus' --output text)
          if [[ $STACK_STATUS == *"ROLLBACK"* || $STACK_STATUS == *"FAILED"* ]]; then
            echo "Stack is in failed state ($STACK_STATUS), deleting..."
            aws cloudformation delete-stack --stack-name $STACK_NAME
            echo "Waiting for stack deletion to complete..."
            aws cloudformation wait stack-delete-complete --stack-name $STACK_NAME
            echo "Stack deleted successfully"
          else
            echo "Stack is in a valid state: $STACK_STATUS"
          fi
      
      - name: Deploy to AWS CloudFormation
        id: deploy
        run: |
          if aws cloudformation describe-stacks --stack-name $STACK_NAME 2>/dev/null; then
            echo "Updating existing stack..."
            aws cloudformation update-stack \
              --stack-name $STACK_NAME \
              --template-body file://vitalink-infrastructure.yaml \
              --parameters \
                ParameterKey=ImageURI,ParameterValue=${{ steps.build-image.outputs.image }} \
                ParameterKey=DatabasePassword,ParameterValue=$DB_PASSWORD \
                ParameterKey=Environment,ParameterValue=$ENVIRONMENT \
                ParameterKey=DesiredTaskCount,ParameterValue=$DESIRED_TASK_COUNT \
              --capabilities CAPABILITY_NAMED_IAM || \
            echo "No updates to be performed."
          else
            echo "Creating new stack..."
            aws cloudformation create-stack \
              --stack-name $STACK_NAME \
              --template-body file://vitalink-infrastructure.yaml \
              --parameters \
                ParameterKey=ImageURI,ParameterValue=${{ steps.build-image.outputs.image }} \
                ParameterKey=DatabasePassword,ParameterValue=$DB_PASSWORD \
                ParameterKey=Environment,ParameterValue=$ENVIRONMENT \
                ParameterKey=DesiredTaskCount,ParameterValue=$DESIRED_TASK_COUNT \
              --capabilities CAPABILITY_NAMED_IAM
          fi
      
      - name: Monitor stack deployment
        run: |
          echo "Monitoring stack deployment..."
          START_TIME=$(date +%s)
          TIMEOUT=1800
          
          while true; do
            CURRENT_TIME=$(date +%s)
            ELAPSED=$((CURRENT_TIME - START_TIME))
            
            if [ $ELAPSED -gt $TIMEOUT ]; then
              echo "Timeout reached. Deployment took too long."
              exit 1
            fi
            
            STACK_STATUS=$(aws cloudformation describe-stacks --stack-name $STACK_NAME --query 'Stacks[0].StackStatus' --output text)
            echo "Current stack status: $STACK_STATUS (Elapsed: ${ELAPSED}s)"
            
            if [[ $STACK_STATUS == "CREATE_COMPLETE" || $STACK_STATUS == "UPDATE_COMPLETE" ]]; then
              echo "Deployment completed successfully!"
              break
            elif [[ $STACK_STATUS == *"FAILED"* || $STACK_STATUS == *"ROLLBACK"* ]]; then
              echo "Deployment failed with status: $STACK_STATUS"
              echo "Checking recent error events:"
              aws cloudformation describe-stack-events \
                --stack-name $STACK_NAME \
                --query 'StackEvents[?ResourceStatus==`CREATE_FAILED` || ResourceStatus==`UPDATE_FAILED`].[LogicalResourceId, ResourceStatusReason]' \
                --output table
              exit 1
            fi
            
            sleep 20
          done
      
      - name: Get deployment outputs
        id: deployment-outputs
        run: |
          echo "Getting deployment outputs..."
          OUTPUTS=$(aws cloudformation describe-stacks --stack-name $STACK_NAME --query 'Stacks[0].Outputs' --output json)
          echo $OUTPUTS
          
          VITALINK_URL=$(echo $OUTPUTS | jq -r '.[] | select(.OutputKey=="VitaLinkURL") | .OutputValue')
          HEALTH_CHECK_URL=$(echo $OUTPUTS | jq -r '.[] | select(.OutputKey=="HealthCheckURL") | .OutputValue')
          DB_ENDPOINT=$(echo $OUTPUTS | jq -r '.[] | select(.OutputKey=="DatabaseEndpoint") | .OutputValue')
          
          echo "::set-output name=vitalink_url::$VITALINK_URL"
          echo "::set-output name=health_check_url::$HEALTH_CHECK_URL"
          echo "::set-output name=db_endpoint::$DB_ENDPOINT"
          
          echo "Application URL: $VITALINK_URL"
          echo "Health Check URL: $HEALTH_CHECK_URL"
          echo "Database Endpoint: $DB_ENDPOINT"
      
      - name: Verify application health
        run: |
          echo "Verifying application health..."
          HEALTH_URL="${{ steps.deployment-outputs.outputs.health_check_url }}"
          MAX_RETRIES=12
          RETRY_INTERVAL=20
          
          for ((i=1; i<=MAX_RETRIES; i++)); do
            echo "Health check attempt $i of $MAX_RETRIES..."
            if curl -s -f "$HEALTH_URL" > /dev/null; then
              echo "Application is healthy!"
              exit 0
            else
              echo "Application not yet available, waiting..."
              sleep $RETRY_INTERVAL
            fi
          done
          
          echo "WARNING: Could not verify application health after deployment"
          echo "Check manually: $HEALTH_URL"
          exit 0
      
      - name: Deployment summary
        run: |
          echo "::group::Deployment Summary"
          echo "VitaLink successfully deployed to AWS!"
          echo "Environment: $ENVIRONMENT"
          echo "Application URL: ${{ steps.deployment-outputs.outputs.vitalink_url }}"
          echo "Health Check: ${{ steps.deployment-outputs.outputs.health_check_url }}"
          echo "Database: ${{ steps.deployment-outputs.outputs.db_endpoint }}"
          echo "::endgroup::"