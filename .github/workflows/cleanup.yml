name: üóëÔ∏è Cleanup AWS Resources

on:
  workflow_dispatch:
    inputs:
      stack_name:
        description: 'Stack name to delete'
        required: true
        default: 'VitaLink-Stack'
        type: string
      cleanup_ecr:
        description: 'Also cleanup ECR repository'
        required: false
        default: false
        type: boolean
      force_delete:
        description: 'Force delete even if stack has resources'
        required: false
        default: false
        type: boolean

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY: vitalink

jobs:
  cleanup:
    name: üßπ AWS Resource Cleanup
    runs-on: ubuntu-latest
    
    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4

      - name: üîß Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: üîç Check stack status
        id: check-stack
        run: |
          STACK_NAME="${{ github.event.inputs.stack_name }}"
          
          if aws cloudformation describe-stacks --stack-name "$STACK_NAME" > /dev/null 2>&1; then
            STATUS=$(aws cloudformation describe-stacks --stack-name "$STACK_NAME" --query 'Stacks[0].StackStatus' --output text)
            echo "stack-exists=true" >> $GITHUB_OUTPUT
            echo "stack-status=$STATUS" >> $GITHUB_OUTPUT
            echo "üìä Stack '$STACK_NAME' exists with status: $STATUS"
          else
            echo "stack-exists=false" >> $GITHUB_OUTPUT
            echo "‚ÑπÔ∏è Stack '$STACK_NAME' does not exist"
          fi

      - name: üìã List stack resources
        if: steps.check-stack.outputs.stack-exists == 'true'
        run: |
          STACK_NAME="${{ github.event.inputs.stack_name }}"
          echo "üìã Resources in stack '$STACK_NAME':"
          aws cloudformation list-stack-resources --stack-name "$STACK_NAME" \
            --query 'StackResourceSummaries[*].[LogicalResourceId,ResourceType,ResourceStatus]' \
            --output table

      - name: ‚ö†Ô∏è Protection check
        if: steps.check-stack.outputs.stack-exists == 'true' && github.event.inputs.force_delete == 'false'
        run: |
          STACK_NAME="${{ github.event.inputs.stack_name }}"
          
          # Controlla se ci sono risorse protette
          PROTECTED_RESOURCES=$(aws cloudformation list-stack-resources --stack-name "$STACK_NAME" \
            --query 'StackResourceSummaries[?contains(ResourceType, `RDS`) || contains(ResourceType, `S3`)].LogicalResourceId' \
            --output text)
          
          if [ -n "$PROTECTED_RESOURCES" ]; then
            echo "‚ö†Ô∏è Stack contains protected resources:"
            echo "$PROTECTED_RESOURCES"
            echo "üõ°Ô∏è Use 'force_delete=true' to delete anyway"
            exit 1
          fi

      - name: üóëÔ∏è Delete CloudFormation stack
        if: steps.check-stack.outputs.stack-exists == 'true'
        run: |
          STACK_NAME="${{ github.event.inputs.stack_name }}"
          
          echo "üóëÔ∏è Deleting stack '$STACK_NAME'..."
          aws cloudformation delete-stack --stack-name "$STACK_NAME"
          
          echo "‚è≥ Waiting for stack deletion to complete..."
          aws cloudformation wait stack-delete-complete --stack-name "$STACK_NAME"
          
          echo "‚úÖ Stack '$STACK_NAME' deleted successfully!"

      - name: üê≥ Cleanup ECR repository
        if: github.event.inputs.cleanup_ecr == 'true'
        run: |
          echo "üê≥ Cleaning up ECR repository..."
          
          if aws ecr describe-repositories --repository-names "$ECR_REPOSITORY" > /dev/null 2>&1; then
            # Lista tutte le immagini
            echo "üìã Images in repository:"
            aws ecr list-images --repository-name "$ECR_REPOSITORY" \
              --query 'imageIds[*].[imageTag,imageDigest]' --output table
            
            # Elimina tutte le immagini
            echo "üóëÔ∏è Deleting all images..."
            aws ecr batch-delete-image \
              --repository-name "$ECR_REPOSITORY" \
              --image-ids "$(aws ecr list-images --repository-name "$ECR_REPOSITORY" --query 'imageIds')"
            
            # Elimina il repository
            echo "üóëÔ∏è Deleting ECR repository..."
            aws ecr delete-repository --repository-name "$ECR_REPOSITORY" --force
            
            echo "‚úÖ ECR repository cleaned up!"
          else
            echo "‚ÑπÔ∏è ECR repository '$ECR_REPOSITORY' does not exist"
          fi

      - name: üßπ Check for orphaned resources
        run: |
          echo "üîç Checking for orphaned AWS resources..."
          
          # Verifica VPC orfani
          echo "üì° Checking for orphaned VPCs..."
          aws ec2 describe-vpcs \
            --filters "Name=tag:Project,Values=VitaLink" \
            --query 'Vpcs[*].[VpcId,Tags[?Key==`Name`].Value|[0]]' \
            --output table
          
          # Verifica Security Groups orfani
          echo "üõ°Ô∏è Checking for orphaned Security Groups..."
          aws ec2 describe-security-groups \
            --filters "Name=tag:Project,Values=VitaLink" \
            --query 'SecurityGroups[*].[GroupId,GroupName]' \
            --output table || true
          
          # Verifica ECS Clusters orfani
          echo "üö¢ Checking for orphaned ECS Clusters..."
          aws ecs list-clusters --query 'clusterArns[?contains(@, `VitaLink`)]' --output table || true
          
          # Verifica RDS Instances orfane
          echo "üíæ Checking for orphaned RDS Instances..."
          aws rds describe-db-instances \
            --query 'DBInstances[?contains(DBInstanceIdentifier, `vitalink`)].DBInstanceIdentifier' \
            --output table || true

      - name: üìä Generate cleanup summary
        run: |
          cat >> $GITHUB_STEP_SUMMARY << EOF
          # üßπ AWS Resource Cleanup Summary
          
          ## üìã Cleanup Details
          - **Stack Name**: ${{ github.event.inputs.stack_name }}
          - **Stack Existed**: ${{ steps.check-stack.outputs.stack-exists }}
          - **Initial Status**: ${{ steps.check-stack.outputs.stack-status || 'N/A' }}
          - **ECR Cleanup**: ${{ github.event.inputs.cleanup_ecr }}
          - **Force Delete**: ${{ github.event.inputs.force_delete }}
          
          ## ‚úÖ Actions Completed
          - Stack deletion: ${{ steps.check-stack.outputs.stack-exists == 'true' && '‚úÖ Completed' || '‚ÑπÔ∏è Skipped (stack not found)' }}
          - ECR cleanup: ${{ github.event.inputs.cleanup_ecr == 'true' && '‚úÖ Completed' || '‚ÑπÔ∏è Skipped' }}
          - Orphaned resource check: ‚úÖ Completed
          
          ## üîç Next Steps
          1. Verify that all resources have been properly cleaned up
          2. Check AWS console to confirm no unexpected charges
          3. Review any orphaned resources identified above
          
          ---
          üóëÔ∏è **Cleanup completed successfully!**
          EOF

  verify-cleanup:
    name: ‚úÖ Verify Cleanup
    runs-on: ubuntu-latest
    needs: cleanup
    if: always()
    
    steps:
      - name: üîß Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: ‚úÖ Final verification
        run: |
          STACK_NAME="${{ github.event.inputs.stack_name }}"
          
          echo "üîç Final verification of cleanup..."
          
          # Verifica che lo stack sia stato eliminato
          if aws cloudformation describe-stacks --stack-name "$STACK_NAME" > /dev/null 2>&1; then
            echo "‚ùå Stack '$STACK_NAME' still exists!"
            aws cloudformation describe-stacks --stack-name "$STACK_NAME" \
              --query 'Stacks[0].StackStatus' --output text
          else
            echo "‚úÖ Stack '$STACK_NAME' successfully deleted"
          fi
          
          # Verifica ECR se richiesto
          if [ "${{ github.event.inputs.cleanup_ecr }}" == "true" ]; then
            if aws ecr describe-repositories --repository-names "$ECR_REPOSITORY" > /dev/null 2>&1; then
              echo "‚ùå ECR repository '$ECR_REPOSITORY' still exists!"
            else
              echo "‚úÖ ECR repository '$ECR_REPOSITORY' successfully deleted"
            fi
          fi
          
          echo "üéâ Cleanup verification completed!"