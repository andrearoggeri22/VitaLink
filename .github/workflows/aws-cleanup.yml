name: AWS Infrastructure Cleanup

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to cleanup'
        required: true
        type: choice
        options:
        - staging
        - production
        - all
      confirm_deletion:
        description: 'Type "DELETE" to confirm deletion'
        required: true
        type: string
      force_delete:
        description: 'Force delete even if stack deletion fails'
        required: false
        default: false
        type: boolean

env:
  AWS_REGION: us-east-1

jobs:
  validate-input:
    name: Validate Deletion Request
    runs-on: ubuntu-latest
    
    steps:
    - name: Validate confirmation
      run: |
        if [ "${{ github.event.inputs.confirm_deletion }}" != "DELETE" ]; then
          echo "Deletion not confirmed. You must type 'DELETE' to confirm."
          exit 1
        fi
        echo "Deletion confirmed"

    - name: Environment validation
      run: |
        ENVIRONMENT="${{ github.event.inputs.environment }}"
        echo "Preparing to cleanup environment: $ENVIRONMENT"
        
        if [ "$ENVIRONMENT" == "production" ]; then
          echo "WARNING: You are about to delete the PRODUCTION environment!"
          echo "This action is irreversible and will result in data loss."
        fi

  cleanup:
    name: Cleanup Infrastructure
    runs-on: ubuntu-latest
    needs: validate-input
    environment: cleanup-${{ github.event.inputs.environment }}
    
    steps:
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Determine stacks to delete
      id: stacks
      run: |
        ENVIRONMENT="${{ github.event.inputs.environment }}"
        
        if [ "$ENVIRONMENT" == "all" ]; then
          STACKS="VitaLink-Stack-staging VitaLink-Stack-production"
        else
          STACKS="VitaLink-Stack-$ENVIRONMENT"
        fi
        
        echo "stacks=$STACKS" >> $GITHUB_OUTPUT
        echo "Stacks to delete: $STACKS"

    - name: List resources before deletion
      run: |
        echo "Current infrastructure inventory:"
        
        for STACK in ${{ steps.stacks.outputs.stacks }}; do
          echo "Checking stack: $STACK"
          
          if aws cloudformation describe-stacks --stack-name "$STACK" 2>/dev/null; then
            STATUS=$(aws cloudformation describe-stacks --stack-name "$STACK" --query 'Stacks[0].StackStatus' --output text)
            echo "Stack $STACK exists with status: $STATUS"
            
            echo "Resources in stack $STACK:"
            aws cloudformation describe-stack-resources --stack-name "$STACK" --query 'StackResources[].[LogicalResourceId,ResourceType,ResourceStatus]' --output table
          else
            echo "Stack $STACK does not exist"
          fi
        done

    - name: Delete CloudFormation stacks
      run: |
        STACKS="${{ steps.stacks.outputs.stacks }}"
        
        for STACK in $STACKS; do
          echo "Deleting stack: $STACK"
          
          if aws cloudformation describe-stacks --stack-name "$STACK" 2>/dev/null; then
            # Disable termination protection if enabled
            aws cloudformation update-termination-protection --no-enable-termination-protection --stack-name "$STACK" 2>/dev/null || echo "Termination protection not enabled or already disabled"
            
            # Delete the stack
            aws cloudformation delete-stack --stack-name "$STACK"
            echo "Deletion initiated for stack: $STACK"
          else
            echo "Stack $STACK does not exist, skipping"
          fi
        done

    - name: Monitor stack deletion
      run: |
        STACKS="${{ steps.stacks.outputs.stacks }}"
        
        for STACK in $STACKS; do
          echo "Monitoring deletion of stack: $STACK"
          
          # Check if stack exists before monitoring
          if aws cloudformation describe-stacks --stack-name "$STACK" 2>/dev/null; then
            echo "Waiting for stack deletion to complete..."
            
            MAX_WAIT=1800  # 30 minutes
            START_TIME=$(date +%s)
            
            while true; do
              CURRENT_TIME=$(date +%s)
              ELAPSED=$((CURRENT_TIME - START_TIME))
              
              if [ $ELAPSED -gt $MAX_WAIT ]; then
                echo "Deletion monitoring timed out after 30 minutes"
                
                if [ "${{ github.event.inputs.force_delete }}" == "true" ]; then
                  echo "Force delete enabled, continuing with cleanup"
                  break
                else
                  echo "Deletion timed out. Check AWS console for manual intervention."
                  exit 1
                fi
              fi
              
              if aws cloudformation describe-stacks --stack-name "$STACK" 2>/dev/null; then
                STATUS=$(aws cloudformation describe-stacks --stack-name "$STACK" --query 'Stacks[0].StackStatus' --output text)
                echo "Stack $STACK status: $STATUS"
                
                if [[ "$STATUS" == *"DELETE_FAILED"* ]]; then
                  echo "Stack deletion failed for $STACK"
                  
                  # Show failed resources
                  echo "Failed resources:"
                  aws cloudformation describe-stack-events --stack-name "$STACK" --query 'StackEvents[?ResourceStatus==`DELETE_FAILED`].[LogicalResourceId,ResourceStatusReason]' --output table
                  
                  if [ "${{ github.event.inputs.force_delete }}" == "true" ]; then
                    echo "Force delete enabled, attempting to continue"
                    break
                  else
                    exit 1
                  fi
                fi
                
                sleep 30
              else
                echo "Stack $STACK deleted successfully"
                break
              fi
            done
          else
            echo "Stack $STACK already deleted or never existed"
          fi
        done

    - name: Cleanup orphaned resources
      if: github.event.inputs.force_delete == 'true'
      run: |
        echo "Cleaning up potentially orphaned resources..."
        
        # Cleanup ECR repositories
        echo "Checking ECR repositories..."
        if aws ecr describe-repositories --repository-names vitalink 2>/dev/null; then
          echo "Deleting ECR repository: vitalink"
          # First delete all images
          aws ecr batch-delete-image --repository-name vitalink --image-ids imageTag=latest || true
          aws ecr list-images --repository-name vitalink --query 'imageIds[*]' --output json | \
            jq '.[] | select(.imageTag != null)' | \
            jq -s '.' | \
            xargs -I {} aws ecr batch-delete-image --repository-name vitalink --image-ids '{}' || true
          
          # Delete repository
          aws ecr delete-repository --repository-name vitalink --force || echo "Could not delete ECR repository"
        fi
        
        # Note: Be careful with this section as it might delete unrelated resources
        # Only uncomment if you're sure about the scope
        
        # Cleanup VPCs with VitaLink tag
        # echo "Checking for VitaLink VPCs..."
        # VPC_IDS=$(aws ec2 describe-vpcs --filters "Name=tag:Project,Values=VitaLink" --query 'Vpcs[].VpcId' --output text)
        # for VPC_ID in $VPC_IDS; do
        #   echo "Would delete VPC: $VPC_ID (manual cleanup required)"
        # done

    - name: Verify cleanup completion
      run: |
        echo "Verifying cleanup completion..."
        
        STACKS="${{ steps.stacks.outputs.stacks }}"
        ALL_DELETED=true
        
        for STACK in $STACKS; do
          if aws cloudformation describe-stacks --stack-name "$STACK" 2>/dev/null; then
            STATUS=$(aws cloudformation describe-stacks --stack-name "$STACK" --query 'Stacks[0].StackStatus' --output text)
            echo "Stack $STACK still exists with status: $STATUS"
            ALL_DELETED=false
          else
            echo "Stack $STACK successfully deleted"
          fi
        done
        
        if [ "$ALL_DELETED" == "true" ]; then
          echo "All infrastructure successfully cleaned up!"
        else
          echo "Some resources may still exist. Check AWS console for manual cleanup."
        fi

  notify-cleanup:
    name: Cleanup Notification
    runs-on: ubuntu-latest
    needs: cleanup
    if: always()
    
    steps:
    - name: Create cleanup summary
      run: |
        echo "# VitaLink Infrastructure Cleanup Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## Cleanup Details" >> $GITHUB_STEP_SUMMARY
        echo "- **Environment**: ${{ github.event.inputs.environment }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Requested by**: ${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Timestamp**: $(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_STEP_SUMMARY
        echo "- **Force Delete**: ${{ github.event.inputs.force_delete }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [ "${{ needs.cleanup.result }}" == "success" ]; then
          echo "## Status: Cleanup Successful" >> $GITHUB_STEP_SUMMARY
          echo "The infrastructure has been successfully removed." >> $GITHUB_STEP_SUMMARY
        else
          echo "## Status: Cleanup Issues" >> $GITHUB_STEP_SUMMARY
          echo "There were issues during the cleanup process. Manual intervention may be required." >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## Cost Impact" >> $GITHUB_STEP_SUMMARY
        echo "Deleted resources will no longer incur AWS charges." >> $GITHUB_STEP_SUMMARY
        echo "Monitor your AWS billing to confirm cost reduction." >> $GITHUB_STEP_SUMMARY
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## Important Notes" >> $GITHUB_STEP_SUMMARY
        echo "- All data in deleted RDS instances is permanently lost" >> $GITHUB_STEP_SUMMARY
        echo "- Container images in ECR may have been removed" >> $GITHUB_STEP_SUMMARY
        echo "- Load balancer DNS names are no longer valid" >> $GITHUB_STEP_SUMMARY
        echo "- To redeploy, trigger the deployment workflow with a new image" >> $GITHUB_STEP_SUMMARY
