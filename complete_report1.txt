def generate_complete_report(patient, doctor, notes, observations, summary=None, language=None):
    """
    Generate a complete PDF report with all patient data, vital signs, and observations
    
    Args:
        patient: Patient object
        doctor: Doctor object
        notes: List of Note objects
        observations: List of VitalObservation objects
        summary: Optional summary text provided by the doctor (not saved to database)
        language: Optional language code override (it/en)
        
    Returns:
        BytesIO: PDF file as a binary stream
    """
    buffer = BytesIO()
    
    # Get translations
    t = get_report_translations(language)
    
    # Create the PDF document
    doc = SimpleDocTemplate(
        buffer,
        pagesize=A4,
        rightMargin=50,
        leftMargin=50,
        topMargin=50,
        bottomMargin=50
    )
    
    # Get styles
    styles = getSampleStyleSheet()
    styles.add(ParagraphStyle(
        name='Heading1Center',
        parent=styles['Heading1'],
        alignment=1  # 0=left, 1=center, 2=right
    ))
    styles.add(ParagraphStyle(
        name='Normal-Center',
        parent=styles['Normal'],
        alignment=1
    ))
    styles.add(ParagraphStyle(
        name='Normal-Bold',
        parent=styles['Normal'],
        fontName='Helvetica-Bold'
    ))
    
    # Build content
    content = []
    
    # Report Header
    content.append(Paragraph(t['complete_report'], styles['Heading1Center']))
    content.append(Spacer(1, 12))
    
    # Date of report
    content.append(Paragraph(f"{t['generated_on']}: {datetime.now().strftime('%Y-%m-%d %H:%M')}", styles['Normal-Center']))
    content.append(Spacer(1, 24))
    
    # Patient Information
    content.append(Paragraph(t['patient_info'], styles['Heading2']))
    content.append(Spacer(1, 6))
    
    patient_data = [
        [f"{t['name']}:", f"{patient.first_name} {patient.last_name}"],
        [f"{t['date_of_birth']}:", patient.date_of_birth.strftime('%Y-%m-%d')],
        [f"{t['gender']}:", patient.gender or t['not_specified']],
        [f"{t['contact']}:", patient.contact_number or t['not_provided']]
    ]
    
    patient_table = Table(patient_data, colWidths=[1.5*inch, 4*inch])
    patient_table.setStyle(TableStyle([
        ('BACKGROUND', (0, 0), (0, -1), colors.lightgrey),
        ('TEXTCOLOR', (0, 0), (-1, -1), colors.black),
        ('ALIGN', (0, 0), (-1, -1), 'LEFT'),
        ('FONTNAME', (0, 0), (-1, -1), 'Helvetica'),
        ('FONTSIZE', (0, 0), (-1, -1), 10),
        ('BOTTOMPADDING', (0, 0), (-1, -1), 5),
        ('TOPPADDING', (0, 0), (-1, -1), 5),
        ('GRID', (0, 0), (-1, -1), 1, colors.black)
    ]))
    
    content.append(patient_table)
    content.append(Spacer(1, 12))
    
    # Doctor Information
    content.append(Paragraph(t['attending_physician'], styles['Heading2']))
    content.append(Spacer(1, 6))
    
    doctor_data = [
        [f"{t['name']}:", f"Dr. {doctor.first_name} {doctor.last_name}"],
        [f"{t['specialty']}:", doctor.specialty or t['general_practice']],
        [f"{t['email']}:", doctor.email]
    ]
    
    doctor_table = Table(doctor_data, colWidths=[1.5*inch, 4*inch])
    doctor_table.setStyle(TableStyle([
        ('BACKGROUND', (0, 0), (0, -1), colors.lightgrey),
        ('TEXTCOLOR', (0, 0), (-1, -1), colors.black),
        ('ALIGN', (0, 0), (-1, -1), 'LEFT'),
        ('FONTNAME', (0, 0), (-1, -1), 'Helvetica'),
        ('FONTSIZE', (0, 0), (-1, -1), 10),
        ('BOTTOMPADDING', (0, 0), (-1, -1), 5),
        ('TOPPADDING', (0, 0), (-1, -1), 5),
        ('GRID', (0, 0), (-1, -1), 1, colors.black)
    ]))
    
    content.append(doctor_table)
    content.append(Spacer(1, 24))
    
    # Optional Summary if provided
    if summary:
        content.append(Paragraph(t['summary'], styles['Heading2']))
        content.append(Spacer(1, 6))
        content.append(Paragraph(summary, styles['Normal']))
        content.append(Spacer(1, 18))
    
    # Notes Section
    content.append(Paragraph(t['clinical_notes'], styles['Heading2']))
    content.append(Spacer(1, 6))
    
    if notes:
        for i, note in enumerate(notes):
            doctor_name = f"Dr. {note.doctor.first_name} {note.doctor.last_name}"
            note_header = f"{note.created_at.strftime('%Y-%m-%d %H:%M')} - {doctor_name}"
            content.append(Paragraph(note_header, styles['Heading4']))
            content.append(Paragraph(note.content, styles['Normal']))
            content.append(Spacer(1, 12))
    else:
        content.append(Paragraph(t['no_notes'], styles['Normal']))
    
    content.append(PageBreak())
    
    # Vital Signs Section with Charts and Observations
    content.append(Paragraph(t['vital_signs'], styles['Heading2']))
    content.append(Spacer(1, 12))
    
    # Health Platform Connection Status
    if patient.connected_platform:
        content.append(Paragraph(f"Health Platform Connection: {patient.connected_platform.value} (Active)", styles['Normal-Bold']))
        content.append(Spacer(1, 12))
    
    # Time periods for charts
    time_periods = [
        {'name': t['one_day'], 'days': 1},
        {'name': t['seven_days'], 'days': 7},
        {'name': t['one_month'], 'days': 30},
        {'name': t['three_months'], 'days': 90},
        {'name': t['one_year'], 'days': 365}
    ]
    
    # Vital sign types to include with their display names
    vital_types = {
        VitalSignType.HEART_RATE: "Heart Rate",
        VitalSignType.STEPS: "Steps",
        VitalSignType.WEIGHT: "Weight",
        VitalSignType.OXYGEN_SATURATION: "Oxygen Saturation",
        VitalSignType.TEMPERATURE: "Temperature",
        VitalSignType.RESPIRATORY_RATE: "Respiratory Rate",
        VitalSignType.GLUCOSE: "Glucose",
        VitalSignType.ACTIVE_MINUTES: "Active Minutes",
        VitalSignType.CALORIES: "Calories",
        VitalSignType.DISTANCE: "Distance",
        VitalSignType.SLEEP_DURATION: "Sleep Duration",
        VitalSignType.FLOORS_CLIMBED: "Floors Climbed"
    }
    
    # For each vital type, create charts for all time periods and include observations
    for vital_enum, vital_name in vital_types.items():
        vital_type = vital_enum.value
        
        # Section for this vital type
        content.append(Paragraph(f"{vital_name}", styles['Heading3']))
        content.append(Spacer(1, 6))
        
        vital_observations = [obs for obs in observations if obs.vital_type == vital_enum]
        
        # Add charts for each time period
        for period in time_periods:
            days = period['days']
            end_date = datetime.now()
            start_date = end_date - timedelta(days=days)
            
            # Fetch data from health platform
            if patient.connected_platform:
                try:
                    vitals_data = health_platforms.get_vitals_data(
                        patient, 
                        vital_type,
                        start_date.strftime('%Y-%m-%d'),
                        end_date.strftime('%Y-%m-%d')
                    )
                    
                    if vitals_data and len(vitals_data) > 0:
                        # Add period header
                        content.append(Paragraph(f"{period['name']}", styles['Heading4']))
                        
                        # Generate and add chart
                        chart = create_vital_chart(vitals_data, period['name'], vital_type)
                        content.append(chart)
                        content.append(Spacer(1, 12))
                except Exception as e:
                    logger.error(f"Error generating chart for {vital_type}, period {days} days: {str(e)}")
                    content.append(Paragraph(f"{t['no_vital_data']} ({period['name']})", styles['Normal']))
                    content.append(Spacer(1, 6))
            else:
                content.append(Paragraph(f"{t['no_vital_data']}", styles['Normal']))
                content.append(Spacer(1, 6))
        
        # Add observations for this vital type
        content.append(Paragraph(f"{t['observations']} - {vital_name}", styles['Heading4']))
        content.append(Spacer(1, 6))
        
        if vital_observations:
            for obs in vital_observations:
                # Format the observation header with date range
                obs_period = f"{obs.start_date.strftime('%Y-%m-%d')} - {obs.end_date.strftime('%Y-%m-%d')}"
                doctor_name = f"Dr. {obs.doctor.first_name} {obs.doctor.last_name}"
                obs_header = f"{obs_period} ({doctor_name})"
                
                content.append(Paragraph(obs_header, styles['Normal-Bold']))
                content.append(Paragraph(obs.content, styles['Normal']))
                content.append(Spacer(1, 8))
        else:
            content.append(Paragraph(f"{t['no_observations']}", styles['Normal']))
        
        content.append(Spacer(1, 18))
        
        # Add page break after each vital type except the last one
        content.append(PageBreak())
    
    # Add recommendations
    content.append(Paragraph(t['recommendations'], styles['Heading3']))
    content.append(Spacer(1, 6))
    content.append(Paragraph(t['consult_doctor'], styles['Normal']))
    
    # Build the PDF
    doc.build(content)
    buffer.seek(0)
    
    return buffer

def generate_specific_report(patient, doctor, selected_notes, selected_vital_types, selected_charts, selected_observations, summary=None, language=None):
    """
    Generate a specific PDF report with only selected data
    
    Args:
        patient: Patient object
        doctor: Doctor object
        selected_notes: List of selected Note objects
        selected_vital_types: List of selected vital types
        selected_charts: Dict mapping vital type to list of selected time periods
        selected_observations: List of selected VitalObservation objects
        summary: Optional summary text provided by the doctor (not saved to database)
        language: Optional language code override (it/en)
        
    Returns:
